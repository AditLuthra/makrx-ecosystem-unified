version: '3.8'

services:
  # Infrastructure services (same as development but with staging config)
  postgres-staging:
    image: postgres:15-alpine
    container_name: makrx-staging-postgres
    environment:
      POSTGRES_DB: makrx_staging
      POSTGRES_USER: makrx_staging
      POSTGRES_PASSWORD: makrx_staging_password
    ports:
      - '5434:5432'
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./services/postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - makrx-staging-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U makrx_staging -d makrx_staging']
      interval: 30s
      timeout: 10s
      retries: 3

  redis-staging:
    image: redis:7-alpine
    container_name: makrx-staging-redis
    ports:
      - '6381:6379'
    volumes:
      - redis_staging_data:/data
    networks:
      - makrx-staging-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  minio-staging:
    image: minio/minio:latest
    container_name: makrx-staging-minio
    ports:
      - '9004:9000'
      - '9005:9001'
    environment:
      MINIO_ROOT_USER: makrxstaging
      MINIO_ROOT_PASSWORD: makrxstaging123
    volumes:
      - minio_staging_data:/data
    networks:
      - makrx-staging-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 3

  keycloak-staging:
    image: quay.io/keycloak/keycloak:25.0
    container_name: makrx-staging-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: staging123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-staging:5432/makrx_staging
      KC_DB_USERNAME: makrx_staging
      KC_DB_PASSWORD: makrx_staging_password
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
    ports:
      - '8082:8080'
    depends_on:
      postgres-staging:
        condition: service_healthy
    networks:
      - makrx-staging-network
    volumes:
      - ./services/keycloak/realm-config:/opt/keycloak/data/import
    command: ['start-dev', '--import-realm']
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health/ready']
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Monitoring for staging
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: makrx-staging-prometheus
    ports:
      - '9091:9090'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - makrx-staging-network

networks:
  makrx-staging-network:
    driver: bridge

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  minio_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
