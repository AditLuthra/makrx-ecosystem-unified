Key Findings

Frontend API client mismatch: apps/makrx-store/src/lib/api.ts targets non-existent paths (missing /api prefix, wrong segments) and contains mock fallback logic. Many store pages import and use this client.
Alternate API client exists: apps/makrx-store/src/services/storeApi.ts aligns with the store backend (/api/\*) but is barely used in pages.
Next.js API routes missing: Several pages call Next /api/catalog/... that don’t exist; the backend provides these under /api/enhanced-catalog/catalog/....
Backend gaps: Some endpoints expected by the frontend don’t exist (admin stats, notifications settings), or use different shapes (no product slug endpoint).
Provider dashboard endpoints: Frontend calls /api/v1/providers/...; the provider service exposes /api/v1/provider/... (singular) and is a different backend entirely.
Mock/placeholder usage: Store app still includes mock fallback in api.ts. Other apps (MakrCave, Events) include mock data in UI components.
Frontend API Client (apps/makrx-store/src/lib/api.ts)

Wrong base routes used across methods (examples):
getProducts → calls /catalog/products… but backend is /api/products (store)
backends/makrx-store/routes/catalog.py:14,72
getCategories → /catalog/categories vs /api/categories (store)
backends/makrx-store/routes/catalog.py:118
getProductBySlug → /catalog/products/slug/:slug does not exist in store backend. No slug route found; requires new backend route or use enhanced search by slug.
healthCheck → /health is OK (store)
backends/makrx-store/routes/health.py:13
checkout → /orders/checkout needs /api/orders/checkout
backends/makrx-store/routes/orders.py:132
cart → all need /api/cart* not /cart*
backends/makrx-store/routes/cart.py:21,88,154,188
uploads → need /api/uploads/sign|complete|:id not /uploads/_
backends/makrx-store/routes/uploads.py:268,329,464
quotes → /api/quotes not /quotes; materials are under /api/quotes/materials/
backends/makrx-store/routes/quotes.py:318,426,436,446
service-orders → /api/service-orders not /service-orders
backends/makrx-store/main.py:126
auth/me → /api/auth/me not /auth/me
backends/makrx-store/routes/auth.py:15
admin stats → frontend expects /admin/stats but backend has only /api/admin/dashboard placeholder
apps/makrx-store/src/lib/api.ts:834
backends/makrx-store/routes/admin.py:8
user/notifications (settings) → no backend route exists; methods will 404 if called
apps/makrx-store/src/lib/api.ts:845,852
Mock fallback logic present:
Uses NEXT_PUBLIC_USE_MOCK_DATA and network-error fallback to getMockData<T>().
apps/makrx-store/src/lib/api.ts:210–238, 248–285, 401–429
Contains mock data generators for products, categories, cart, user
apps/makrx-store/src/lib/api.ts:861–1248
Provider APIs in api.ts point to /api/v1/providers/_ and /api/v1/service-orders/_ (wrong service and path):
makrx-services provider routes are /api/v1/provider/_ (singular)
backends/makrx-services/app/routes/providers.py:13,20,76,173,301
Store service-orders are /api/service-orders/\*
backends/makrx-store/routes/service_orders.py:1,29
Where the frontend uses the wrong client/paths

Frontend imports api (lib/api.ts) widely:
Checkout/cart/orders/product pages, upload/quote flows, order tracking, header, components
apps/makrx-store/src/app/checkout/page.tsx:21
apps/makrx-store/src/app/cart/page.tsx (multiple)
apps/makrx-store/src/app/order/confirmation/[id]/page.tsx:21
apps/makrx-store/src/app/product/[slug]/page.tsx:23
apps/makrx-store/src/app/3d-printing/page.tsx:30
apps/makrx-store/src/app/3d-printing/enhanced-page.tsx:26
apps/makrx-store/src/components/FileProcessingStatus.tsx:4
apps/makrx-store/src/components/RealTimeOrderStatus.tsx:4
apps/makrx-store/src/components/layout/Header.tsx:17
Pages call non-existent Next API routes under /api/catalog/\*:
apps/makrx-store/src/app/(catalog)/c/page.tsx:26,31
apps/makrx-store/src/app/(search)/brands/page.tsx:30
apps/makrx-store/src/app/(search)/brands/[slug]/page.tsx:61
apps/makrx-store/src/app/(search)/tags/[slug]/page.tsx:68
apps/makrx-store/src/app/(search)/collections/[slug]/page.tsx:62,70
Backend provides these under /api/enhanced-catalog/catalog/...
backends/makrx-store/routes/enhanced_catalog_routes.py:62,191,231,282,374,468
backends/makrx-store/routes/enhanced_catalog.py:1,84
There is only a GET /api/health in Next app:
apps/makrx-store/src/app/api/health/route.ts:3
NotificationContext uses api methods that don’t exist:
api.getNotifications, api.markNotificationAsRead, api.markAllNotificationsAsRead are called but not implemented in lib/api.ts
apps/makrx-store/src/contexts/NotificationContext.tsx:108,168,178
Backend Endpoint Gaps (store)

Admin stats endpoint missing; only a “implementation needed” dashboard exists.
backends/makrx-store/routes/admin.py:8
Product lookup by slug missing; frontend expects GET /catalog/products/slug/:slug
No slug route found in store backend. Use enhanced search or add slug route.
User notifications (settings or items) APIs not present; frontend references /user/notifications.
Provider Service (makrx-services)

Exposes /api/v1/provider/_ (singular).
backends/makrx-services/app/routes/providers.py:20,76,173,301
Frontend api.ts targets /api/v1/providers/_ (plural) and uses the store API base URL; this will fail and hit the wrong service. Provider calls require a separate NEXT_PUBLIC_SERVICES_API_URL base and path fix.
Mock/Placeholder Usage

Store: mock fallback in lib/api.ts only (see above). Needs to be disabled/removed for production.
Store: explicit TODOs/coming soon
apps/makrx-store/src/app/account/notifications/page.tsx:46
apps/makrx-store/src/components/admin/ComprehensiveStoreDashboard.tsx:578
apps/makrx-store/src/components/admin/SuperAdminDashboard.tsx:366
MakrCave and MakrX Events apps: mock data used in many components (non-store)
apps/makrcave/components/EquipmentRating.tsx:102–121
apps/makrcave/components/InteractiveMap.tsx:48,84,119,154,159
apps/makrcave/components/learning/CoursePlayer.tsx:106,146,151,156,244
apps/makrx-events/components/microsite/SectionRenderer.tsx:136–312
These are outside the store app but worth tracking if going production-wide.
Recommended Fixes

Unify on a single API client for the store:
Option A (minimal refactor): Update apps/makrx-store/src/lib/api.ts to correct all paths to /api/_, add separate base for provider service (NEXT_PUBLIC_SERVICES_API_URL), and remove mock fallback in production.
Option B (cleaner): Migrate imports to apps/makrx-store/src/services/storeApi.ts (already aligned to /api/_) and extend it to cover uploads/quotes/enhanced-catalog. Then delete/deprecate lib/api.ts.
Correct page fetches that call missing Next routes:
Replace fetch('/api/catalog/...') with calls to the backend:
Use the API client methods you add for:
Brands list/details
Collections list/details/products
Tags popular/details
Categories tree
Or directly fetch ${API_BASE_URL}/api/enhanced-catalog/catalog/... with proper headers.
Provider Dashboard integration:
Split provider APIs to a new client with base process.env.NEXT_PUBLIC_SERVICES_API_URL and paths /api/v1/provider/\*.
Update usages in apps/makrx-store/src/app/provider-dashboard/page.tsx to:
getAvailableJobs (not getAvailableProviders)
GET /provider/jobs and GET /provider/jobs/available
POST /provider/jobs/{id}/accept
GET/PATCH /provider/inventory
Close backend gaps or gate features:
Implement admin stats endpoint the frontend needs or gate the UI behind a feature flag until ready.
Implement product-by-slug on store backend, or change the product page to resolve ID via enhanced search by slug.
Implement user notifications or disable NotificationContext polling behind NEXT_PUBLIC_NOTIFICATIONS_ENABLED=false.
Remove mock fallback for production:
Ensure NEXT_PUBLIC_USE_MOCK_DATA is ignored/false in production, and remove network-error automatic mock fallback. Hard-fail so integration issues surface.
Consistency and env:
Add NEXT_PUBLIC_API_URL to point to the store backend (8003 in dev) and NEXT_PUBLIC_SERVICES_API_URL for the provider service.
Standardize all calls through clients to enforce Authorization header and session handling.
Concrete Change Plan (suggested)

Update lib/api.ts to correct paths; remove mock fallback in production:
Prefix all store endpoints with /api.
Change getMaterials() to /api/quotes/materials/.
Change getServiceCapabilities() to a valid path or remove until implemented.
Change auth to /api/auth/me.
Change orders, cart, uploads, quotes, service-orders to /api/_.
Add a separate provider client base: const SERVICES_BASE = process.env.NEXT_PUBLIC_SERVICES_API_URL || 'http://localhost:PORT'; and update provider methods to /api/v1/provider/_.
Block mock fallback unless NODE_ENV!=='production' and NEXT_PUBLIC_USE_MOCK_DATA==='true'; do not auto-fallback on network errors.
Add enhanced catalog methods to the client:
getBrands, getBrand, getCollections, getCollection, getCollectionProducts, getPopularTags, advancedSearch, getCategoryTree → hit /api/enhanced-catalog/catalog/....
Update pages that currently fetch /api/catalog/... to use these client methods.
Gate or remove unimplemented features:
Notification settings page: hide API calls or guard with NEXT_PUBLIC_NOTIFICATIONS_ENABLED.
Notification polling in NotificationContext: guard with the same flag to avoid calling non-existent endpoints.
Optionally, add a backend slug product route:
GET /api/products/slug/{slug} for parity, or document the change to fetch by ID via enhanced search.
If you want, I can start by:

Patching apps/makrx-store/src/lib/api.ts to correct paths, add enhanced-catalog methods, separate provider base, and disable mock fallback in production.
Refactoring pages that call missing Next /api/catalog/\* routes to use the corrected client.
Adding a small services/providerApi.ts to isolate provider-service calls.

I’ve mapped the makrx-events app, reviewed pages, API routes, libs, and components. Below are concrete findings and a prioritized launch checklist.

Architecture & Setup

Next.js: 14.2.x app router with many API routes under app/api/\* and client-heavy pages/components.
DB: Drizzle ORM with a Neon serverless client wrapper in apps/makrx-events/lib/db.ts.
Auth: Keycloak SSO via @makrx/auth; login/callback endpoints exist.
Styling/UI: Tailwind + shadcn-esque components under components/ui.
Rate limiting: Upstash optional fallback to in-memory.
Realtime: WebSocket client and server files present but not integrated with Next server.

Critical Blockers

DB client mismatch: apps/makrx-events/lib/db.ts imports Pool from @neondatabase/serverless and uses drizzle-orm/neon-serverless. Typical patterns are either:
Neon HTTP: import { neon } from '@neondatabase/serverless' + drizzle(neon(DATABASE_URL)), or
Node pg: import { Pool } from 'pg' + drizzle(pool).
Without fixing this, all DB-backed API routes will error.
Schema vs code divergence: Many API routes and services assume columns that don’t exist in packages/shared/src/schema.ts.
Payments: Code expects paymentTransactions.eventId, userId, currency, paymentMethod, transactionId, gatewayOrderId, gatewayPaymentId, completedAt, error, metadata etc. Schema only has registrationId, amount, status, createdAt. Breaks payment flows.
Registrations: Code references eventRegistrations.type and other fields not in schema.
Email: emailTemplates fields in code (htmlContent, textContent) don’t exist; schema has body only. Queue code assumes emailQueue.recipient, priority, scheduledFor, metadata; schema defines to, subject, body, scheduledAt.
Payments inconsistent and incomplete:
Stripe client exists (components/payment/StripePaymentForm.tsx) but no app/api/payments/create-payment-intent route.
Razorpay order route exists (apps/makrx-events/app/api/payments/create-order/route.ts), but uses VITE_RAZORPAY_KEY_ID env naming and returns client-side config; Stripe + Razorpay conflict. Needs one coherent path.
Heavy mock usage in API and pages: Numerous public endpoints return mock data:
Microsites (details, sections, events, analytics, registrations, event sub-slug endpoints): apps/makrx-events/app/api/microsites/\*.
Check-ins: mock-based apps/makrx-events/app/api/registrations/[id]/check-in/route.ts.
Sitemaps: mock microsites in apps/makrx-events/app/sitemap.ts:7.
Frontend pages for microsites and sub-events render with static/mock content.
Launching with these will mislead users or break expectations unless marketed as demo.
Nodemailer bug: apps/makrx-events/lib/email-service.ts uses nodemailer.createTransporter(...). Correct API is createTransport(...). As written, it will crash.
WebSocket server integration: lib/websocket-service.ts starts a ws server, but Next app does not expose a custom HTTP server to attach it; the client hooks connect to /ws which likely 404s. Not wired for production.

High Priority Issues

CSP risks: apps/makrx-events/next.config.js sets stringent CSP in prod: style-src 'self'. UI uses Tailwind; inline styles and certain third-party scripts (Stripe/Razorpay) will need allowances ('unsafe-inline', script origins). Payment and analytics integrations typically require more permissive script-src/connect-src.
File uploads: app/api/upload/route.ts writes to public/uploads/\*. In serverless or containerized ephemeral FS this is not persistent; production should use cloud storage (S3, R2, etc.) with signed URLs. Current code is fine for demo only.
Auth verification: lib/auth-middleware.ts decodes JWT without signature verification (“simple decode”) and only checks exp. For production, verify with Keycloak JWKS (or use the @makrx/auth server utilities if available).
Env validator vs actual usage mismatch: lib/environment-validator.ts references SESSION_SECRET and Razorpay keys (VITE_RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET), but elsewhere Stripe is used and no session store is implemented. Align on the actual features to launch.
Images: Using <img> with remote URLs. next.config.js images.remotePatterns allow images.unsplash.com and replit.com; other hosts will be blocked.
Medium Priority

Duplicate/legacy components: Two section renderers:
components/microsite/SectionRenderer.tsx (singular, inline mock content),
components/microsites/SectionRenderer.tsx (plural, modular, lazy-loaded).
The page imports the plural version, which is better; the singular one is redundant and mock-heavy.
Admin/analytics routes: Many endpoints under /api/admin/\* compute totals client-side or return placeholder fields. If launch requires analytics, define minimal viable metrics or gate features.
Rate-limit fallback: current in-memory fallback is fine for dev but provides no real protection in prod if Redis isn’t configured.
Websocket client hook: Comprehensive, but without a server endpoint, should be gated or hidden.
Low Priority / Polish

SEO: app/m/[micrositeSlug]/page.tsx sets <title> and meta description inline – consider generateMetadata for better Next integration.
Image optimization: Not using next/image.
Accessibility: Many components likely pass basic checks, but modals/dialogs (Radix) need verification for focus traps and labels.
File References

DB client: apps/makrx-events/lib/db.ts:1
Events API (uses Drizzle with assumed columns): apps/makrx-events/app/api/events/route.ts:1
Participants API (uses non-existent eventRegistrations.type): apps/makrx-events/app/api/events/[eventId]/participants/route.ts:1
Payment service (schema mismatch): apps/makrx-events/lib/payment-service.ts:1
Razorpay order route (Vite env): apps/makrx-events/app/api/payments/create-order/route.ts:1
Stripe form (missing route): apps/makrx-events/components/payment/StripePaymentForm.tsx:1
Nodemailer bug: apps/makrx-events/lib/email-service.ts:1
Mock-heavy APIs: apps/makrx-events/app/api/microsites/\*
Mock sitemap: apps/makrx-events/app/sitemap.ts:7
WebSocket service (not integrated): apps/makrx-events/lib/websocket-service.ts:1
Auth “decode only”: apps/makrx-events/lib/auth-middleware.ts:1
Launch Readiness Assessment

Current state is a demo/prototype with UI scaffolding and numerous mock-backed endpoints.
A production launch requires choosing a payment provider, fixing DB client, aligning schema vs code, replacing mock endpoints with DB implementations, securing auth verification, and moving uploads to cloud storage.
Prioritized Launch Checklist

Database & Schema
Fix Neon/Drizzle client to a supported setup.
Decide the canonical schema for payments, registrations, emails; update either code or packages/shared/src/schema.ts to match. Add missing columns or trim service code accordingly.
Add minimal migrations (if used) to bring DB tables in line.
Authentication
Implement proper Keycloak JWT verification using JWKS (or @makrx/auth server toolkit).
Ensure /api/auth/login and /api/auth/callback use consistent NEXT*PUBLIC_APP_URL and handle error redirects cleanly.
Payments (choose one path)
Stripe path:
Add app/api/payments/create-payment-intent/route.ts that creates PaymentIntents with server secret key.
Set NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY and server STRIPE_SECRET_KEY. Update CSP for https://js.stripe.com, https://api.stripe.com.
Remove Razorpay code for MVP or gate it.
Razorpay path:
Standardize env names (RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET); create client/server flows; update UI to Razorpay Checkout.
Remove Stripe components for MVP.
Replace Mocks with DB-backed Implementations
Microsites: implement CRUD for microsites, sections, sub-events, registrations with actual DB calls; remove mock data in:
app/api/microsites/[slug]/*
app/api/microsites/[slug]/events\_
app/api/microsites/[slug]/registrations
app/api/registrations/[id]/check-in
Events listing (app/api/events/route.ts): align fields with schema and ensure filters map to actual columns.
Sitemaps: generate from DB.
Email
Fix nodemailer.createTransporter → createTransport.
Align templates/queue with schema or update schema to support html/text content and scheduling/priority.
For MVP, send basic transactional email (registration confirmation) or gate until ready.
Uploads
Replace local public/uploads/\* write with cloud storage (e.g., S3 presigned URLs). Gate route if not ready.
CSP, Security, and Env
Relax CSP as needed for Stripe/Razorpay and any analytics; include connect-src for API origins and frame-src if embedding checkout.
Validate envs via environment-validator.ts, remove obsolete entries, and add required ones for auth/payments.
WebSockets
If not launching realtime, hide related UI and remove client auto-connect; else add a WebSocket proxy/server and route in Next.
Cleanup & Consistency
Remove duplicate mock renderer components/microsite/SectionRenderer.tsx if only the modular one is used.
Update apps/makrx-events/README.md to reflect actual API approach (currently references a non-existent src/lib/api.ts and mock fallback behavior).
Recommended Scope for v0 Launch (2–3 weeks)

MVP flows: list events, microsite landing pages, registration (free), dashboards minimal, email confirmation.
Defer payments to v0.1 unless absolutely required (it’s the heaviest integration).
No realtime/websocket in v0; no persistent file uploads beyond small logos to cloud storage.
Environment Variables (proposed minimal)

Database: DATABASE_URL
App base: NEXT_PUBLIC_APP_URL
Auth: KEYCLOAK_BASE_URL, KEYCLOAK_REALM, KEYCLOAK_CLIENT_ID, KEYCLOAK_CLIENT_SECRET
Email (optional): SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SMTP_FROM
Payments (if Stripe): NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY, STRIPE_SECRET_KEY
Payments (if Razorpay): RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET

Or prioritize removing mocks for the microsite APIs first to get a real, view-only microsite experience in place?

@makrx/makrcave@1.0.0 type-check

> tsc --noEmit
> 420 {getStatusIcon(member.status)}

                                                 ~~~~~~~~~~~~~

app/members/page.tsx:440:47 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

440 {getStatusBadge(member.status)}

```

app/members/page.tsx:441:45 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

441 {getRoleBadge(member.role)}
~~~~~~~~~~~

app/members/page.tsx:550:26 - error TS18048: 'plan.features' is possibly 'undefined'.

550 {plan.features.slice(0, 3).map((feature, index) => (
```

app/members/page.tsx:559:26 - error TS18048: 'plan.features' is possibly 'undefined'.

559 {plan.features.length > 3 && (

```

app/members/page.tsx:561:31 - error TS18048: 'plan.features' is possibly 'undefined'.

561 +{plan.features.length - 3} more features
```

app/members/page.tsx:629:41 - error TS2769: No overload matches this call.
Overload 1 of 4, '(value: string | number | Date): Date', gave the following error.
Argument of type 'string | undefined' is not assignable to parameter of type 'string | number | Date'.
Type 'undefined' is not assignable to type 'string | number | Date'.
Overload 2 of 4, '(value: string | number): Date', gave the following error.
Argument of type 'string | undefined' is not assignable to parameter of type 'string | number'.
Type 'undefined' is not assignable to type 'string | number'.

629 {new Date(invite.expires_at).toLocaleDateString()}

```

app/profile/page.tsx:130:9 - error TS2698: Spread types may only be created from object types.

130 ...prev[section as keyof UserProfile],
```

app/project-detail/page.tsx:522:13 - error TS2322: Type '{ id: number; item_type: string; item_id: string; item_name: string; quantity: number; unit_cost?: number | undefined; total_cost?: number | undefined; usage_notes?: string | undefined; is_critical: boolean; procurement_status: string; added_by: string; added_at: string; }[]' is not assignable to type 'BOMItem[]'.
Property 'availability_status' is missing in type '{ id: number; item_type: string; item_id: string; item_name: string; quantity: number; unit_cost?: number | undefined; total_cost?: number | undefined; usage_notes?: string | undefined; is_critical: boolean; procurement_status: string; added_by: string; added_at: string; }' but required in type 'BOMItem'.

522 bomItems={project.bom_items}

```

components/BOMManagement.tsx:53:3
53 availability_status: string;
```

'availability_status' is declared here.
components/BOMManagement.tsx:62:3
62 bomItems: BOMItem[];

```
The expected type comes from property 'bomItems' which is declared here on type 'IntrinsicAttributes & BOMManagementProps'

app/skill-management/page.tsx:122:15 - error TS2345: Argument of type '{ id: string; name: string; category: string; description: string; level: "beginner"; equipment_ids: string[]; requirements: string[]; created_at: string; updated_at: string; }[]' is not assignable to parameter of type 'SetStateAction<Skill[]>'.
Type '{ id: string; name: string; category: string; description: string; level: "beginner"; equipment_ids: string[]; requirements: string[]; created_at: string; updated_at: string; }[]' is not assignable to type 'Skill[]'.
Type '{ id: string; name: string; category: string; description: string; level: "beginner"; equipment_ids: string[]; requirements: string[]; created_at: string; updated_at: string; }' is missing the following properties from type 'Skill': prerequisites, equipment, status

122 setSkills(mockSkills);
```

app/skill-management/page.tsx:123:19 - error TS2345: Argument of type '{ id: string; user_id: string; skill_id: string; status: "certified"; certifiedAt: string; expiresAt: string; certifiedBy: string; notes: string; }[]' is not assignable to parameter of type 'SetStateAction<UserSkill[]>'.
Type '{ id: string; user_id: string; skill_id: string; status: "certified"; certifiedAt: string; expiresAt: string; certifiedBy: string; notes: string; }[]' is not assignable to type 'UserSkill[]'.
Type '{ id: string; user_id: string; skill_id: string; status: "certified"; certifiedAt: string; expiresAt: string; certifiedBy: string; notes: string; }' is missing the following properties from type 'UserSkill': userId, userName, userEmail, skillId, skillName

123 setUserSkills(mockUserSkills);

```

app/skill-management/page.tsx:653:9 - error TS2322: Type '{ id: string; firstName: string; lastName: string; email: string; }[]' is not assignable to type 'Member[]'.
Type '{ id: string; firstName: string; lastName: string; email: string; }' is missing the following properties from type 'Member': name, role

653 members={mockMembers}
~~~~~~~

components/modals/CertifyMemberModal.tsx:32:3
32 members?: Member[];
~~~~~~~
The expected type comes from property 'members' which is declared here on type 'IntrinsicAttributes & CertifyMemberModalProps'

app/skill-management/page.tsx:667:9 - error TS2322: Type '{ id: string; name: string; type: string; }[]' is not assignable to type 'Equipment[]'.
Property 'category' is missing in type '{ id: string; name: string; type: string; }' but required in type 'Equipment'.

667 equipment={mockEquipment}
~~~~~~~~~

components/modals/SkillRequirementsModal.tsx:14:3
14 category: string;
~~~~~~~~
'category' is declared here.
components/modals/SkillRequirementsModal.tsx:39:3
39 equipment?: Equipment[];
~~~~~~~~~
The expected type comes from property 'equipment' which is declared here on type 'IntrinsicAttributes & SkillRequirementsModalProps'

app/skill-management/page.tsx:683:9 - error TS2322: Type '{ id: string; name: string; type: string; }[]' is not assignable to type 'Equipment[]'.
Property 'category' is missing in type '{ id: string; name: string; type: string; }' but required in type 'Equipment'.

683 equipment={mockEquipment}
~~~~~~~~~

components/modals/AddSkillModal.tsx:15:3
15 category: string;
~~~~~~~~
'category' is declared here.
components/modals/AddSkillModal.tsx:28:3
28 equipment?: Equipment[];
~~~~~~~~~
The expected type comes from property 'equipment' which is declared here on type 'IntrinsicAttributes & AddSkillModalProps'

app/system-health/page.tsx:80:77 - error TS18048: 's.responseTime' is possibly 'undefined'.

80 averageResponseTime: latestHealth.services.reduce((acc, s) => acc + s.responseTime, 0) / latestHealth.services.length
```

components/AddItemModal.tsx:336:58 - error TS2339: Property 'sku' does not exist on type '{ name: any; category: any; subcategory: any; quantity: any; unit: any; minThreshold: any; location: any; status: any; supplierType: any; productCode: any; price: any; supplier: any; description: any; notes: any; restrictedAccessLevel: any; imageUrl: any; }'.

336 checkForDuplicates(newName, formData.sku);

```

components/BOMManagement.tsx:490:83 - error TS2322: Type '{ className: string; title: string; }' is not assignable to type 'IntrinsicAttributes & Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>'.
Property 'title' does not exist on type 'IntrinsicAttributes & Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>'.

490 <Star className="h-4 w-4 text-red-500 fill-current" title="Critical Item" />
```

components/EnhancedMembershipManagement.tsx:645:23 - error TS2322: Type 'Dispatch<SetStateAction<boolean>>' is not assignable to type '(checked: CheckedState) => void'.
Types of parameters 'value' and 'checked' are incompatible.
Type 'CheckedState' is not assignable to type 'SetStateAction<boolean>'.
Type '"indeterminate"' is not assignable to type 'SetStateAction<boolean>'.

645 onCheckedChange={setShowInactive}

```

../../node_modules/@radix-ui/react-checkbox/dist/index.d.mts:33:5
33 onCheckedChange?(checked: CheckedState): void;
```

The expected type comes from property 'onCheckedChange' which is declared here on type 'IntrinsicAttributes & Omit<CheckboxProps & RefAttributes<HTMLButtonElement>, "ref"> & RefAttributes<...>'

components/EnhancedMembershipManagement.tsx:688:23 - error TS2322: Type 'Dispatch<SetStateAction<boolean>>' is not assignable to type '(checked: CheckedState) => void'.

688 onCheckedChange={setShowInactive}

```

../../node_modules/@radix-ui/react-checkbox/dist/index.d.mts:33:5
33 onCheckedChange?(checked: CheckedState): void;
```

The expected type comes from property 'onCheckedChange' which is declared here on type 'IntrinsicAttributes & Omit<CheckboxProps & RefAttributes<HTMLButtonElement>, "ref"> & RefAttributes<...>'

components/EquipmentAccessPricingManager.tsx:137:7 - error TS2322: Type 'string[]' is not assignable to type '{ label: string; amount: number; }[]'.
Type 'string' is not assignable to type '{ label: string; amount: number; }'.

137 breakdown,

```

types/equipment-access.ts:21:3
21 breakdown: Array<{ label: string; amount: number }>;
```

The expected type comes from property 'breakdown' which is declared here on type 'CostEstimate'

components/EquipmentAccessPricingManager.tsx:220:37 - error TS18048: 'eq.type' is possibly 'undefined'.

220 {eq.name} ({eq.type.replace('\_', ' ')})

```

components/EquipmentAccessPricingManager.tsx:447:73 - error TS2339: Property 'equipment_name' does not exist on type 'CostEstimate'.

447 <h4 className="font-semibold">{costEstimate.equipment_name}</h4>
```

components/EquipmentAccessPricingManager.tsx:450:48 - error TS2339: Property 'estimated_total' does not exist on type 'CostEstimate'.

450 ₹{costEstimate.estimated_total.toFixed(2)}

```

components/EquipmentAccessPricingManager.tsx:457:48 - error TS2322: Type '{ label: string; amount: number; }' is not assignable to type 'ReactNode'.

457 <div key={index}>{line}</div>
~~~~~~

../../node_modules/@types/react/index.d.ts:2398:9
2398 children?: ReactNode | undefined;
~~~~~~~~
The expected type comes from property 'children' which is declared here on type 'DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>'

components/EquipmentPolicyManager.tsx:121:25 - error TS2339: Property 'hourlyRate' does not exist on type 'EquipmentItem'.

121 cost_per_hour: eq.hourlyRate,
~~~~~~~~~~

components/EquipmentPolicyManager.tsx:327:35 - error TS18048: 'eq.type' is possibly 'undefined'.

327 {eq.name} ({eq.type.replace('\_', ' ')})
~~~~~~~

components/EquipmentRating.tsx:330:33 - error TS18048: 'totalRatings' is possibly 'undefined'.

330 width: `${totalRatings > 0 ? (ratingBreakdown[stars as keyof typeof ratingBreakdown] / totalRatings) * 100 : 0}%`
~~~~~~~~~~~~

components/EquipmentRating.tsx:330:110 - error TS18048: 'totalRatings' is possibly 'undefined'.

330 width: `${totalRatings > 0 ? (ratingBreakdown[stars as keyof typeof ratingBreakdown] / totalRatings) * 100 : 0}%`
~~~~~~~~~~~~

components/EquipmentSkillRequirements.tsx:142:49 - error TS2339: Property 'level' does not exist on type 'UserSkill'.

142 return { hasSkill: true, level: userSkill.level };
~~~~~

components/FeatureFlaggedDashboard.tsx:198:11 - error TS2322: Type '{ children: Element; flagKey: string; fallback: Element; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'fallback' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

198 fallback={
~~~~~~~~

components/FeatureFlaggedDashboard.tsx:222:67 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

222 const equipmentEnabled = useSpaceFlag('cave.equipment.enabled', currentMakerspace?.id);
```

components/FeatureFlaggedDashboard.tsx:223:73 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

223 const reservationsEnabled = useSpaceFlag('cave.reservations.enabled', currentMakerspace?.id);

```

components/FeatureFlaggedDashboard.tsx:224:67 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

224 const inventoryEnabled = useSpaceFlag('cave.inventory.enabled', currentMakerspace?.id);
```

components/FeatureFlaggedDashboard.tsx:225:65 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

225 const projectsEnabled = useSpaceFlag('cave.projects.enabled', currentMakerspace?.id);

```

components/FeatureFlaggedDashboard.tsx:226:73 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

226 const paidReservations = useSpaceFlag('cave.reservations.paid_usage', currentMakerspace?.id);
```

components/FeatureFlaggedDashboard.tsx:266:35 - error TS2339: Property 'enabled' does not exist on type 'boolean'.

266 {paidReservations.enabled ? 'Revenue Today' : 'Bookings Today'}

```

components/FeatureFlaggedDashboard.tsx:269:35 - error TS2339: Property 'enabled' does not exist on type 'boolean'.

269 {paidReservations.enabled ? '₹2,340' : '12'}
```

components/FeatureFlaggedDashboard.tsx:369:9 - error TS2322: Type '{ children: Element; flagKey: string; maintenanceMessage: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'maintenanceMessage' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

369 maintenanceMessage="The system is currently under maintenance. Service will be restored shortly."

```

components/FeatureFlaggedHeader.tsx:51:67 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

51 const equipmentEnabled = useSpaceFlag('cave.equipment.enabled', currentMakerspace?.id);
```

components/FeatureFlaggedHeader.tsx:52:73 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

52 const reservationsEnabled = useSpaceFlag('cave.reservations.enabled', currentMakerspace?.id);

```

components/FeatureFlaggedHeader.tsx:53:67 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

53 const inventoryEnabled = useSpaceFlag('cave.inventory.enabled', currentMakerspace?.id);
```

components/FeatureFlaggedHeader.tsx:54:65 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

54 const projectsEnabled = useSpaceFlag('cave.projects.enabled', currentMakerspace?.id);

```

components/FeatureFlaggedHeader.tsx:56:67 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

56 const providersEnabled = useSpaceFlag('cave.providers.enabled', currentMakerspace?.id);
```

components/FeatureFlaggedHeader.tsx:57:57 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

57 const jobsEnabled = useSpaceFlag('cave.jobs.enabled', currentMakerspace?.id);

```

components/FeatureFlaggedHeader.tsx:58:67 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

58 const analyticsEnabled = useSpaceFlag('cave.analytics.enabled', currentMakerspace?.id);
```

components/FeatureFlaggedHeader.tsx:59:71 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

59 const maintenanceEnabled = useSpaceFlag('cave.maintenance.enabled', currentMakerspace?.id);

```

components/FeatureFlaggedHeader.tsx:159:19 - error TS2322: Type '{ children: (string | Element)[]; key: string; flagKey: string; href: string; className: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'href' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

159 href={item.href}
~~~~

components/FeatureFlaggedHeader.tsx:175:17 - error TS2322: Type '{ children: string; flagKey: string; href: string; className: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'href' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

175 href="https://store.makrx.org"
~~~~

components/FeatureFlaggedHeader.tsx:185:17 - error TS2322: Type '{ children: string; flagKey: string; href: string; className: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'href' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

185 href="/status"
~~~~

components/FeatureFlaggedHeader.tsx:193:17 - error TS2322: Type '{ children: string; flagKey: string; href: string; className: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'href' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

193 href="/forum"
~~~~

components/FeatureFlaggedHeader.tsx:241:17 - error TS2322: Type '{ children: (string | Element)[]; key: string; flagKey: string; href: string; className: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'href' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

241 href={item.href}
~~~~

components/FeatureFlaggedHeader.tsx:256:17 - error TS2322: Type '{ children: string; flagKey: string; href: string; className: string; }' is not assignable to type 'IntrinsicAttributes & FlagGuardProps'.
Property 'href' does not exist on type 'IntrinsicAttributes & FlagGuardProps'.

256 href="https://store.makrx.org"
~~~~

components/Header.tsx:225:31 - error TS2551: Property 'role' does not exist on type 'MakrXUser'. Did you mean 'roles'?

225 {(user?.role || user?.roles?.[0] || 'user').replace('\_', ' ')}
~~~~

../../packages/auth/src/types.ts:8:3
8 roles: string[];
~~~~~
'roles' is declared here.

components/Header.tsx:238:33 - error TS2551: Property 'role' does not exist on type 'MakrXUser'. Did you mean 'roles'?

238 {(user?.role || user?.roles?.[0] || 'user').replace('\_', ' ')}
~~~~

../../packages/auth/src/types.ts:8:3
8 roles: string[];
~~~~~
'roles' is declared here.

components/HeaderWithHealth.tsx:30:44 - error TS2307: Cannot find module '../contexts/HealthContext' or its corresponding type declarations.

30 import { useHealth, useHealthStatus } from '../contexts/HealthContext';
```

components/HeaderWithHealth.tsx:31:29 - error TS2307: Cannot find module '../../../packages/ui/components/ThemeToggle' or its corresponding type declarations.

31 import { ThemeToggle } from '../../../packages/ui/components/ThemeToggle';

```

components/HealthCheckTest.tsx:103:45 - error TS2769: No overload matches this call.
Overload 1 of 4, '(value: string | number | Date): Date', gave the following error.
Argument of type 'number | undefined' is not assignable to parameter of type 'string | number | Date'.
Overload 2 of 4, '(value: string | number): Date', gave the following error.
Argument of type 'number | undefined' is not assignable to parameter of type 'string | number'.

103 Last updated: {new Date(healthStatus.lastUpdated).toLocaleTimeString()}
~~~~~~~~~~~~~~~~~~~~~~~~

components/HealthCheckTest.tsx:132:39 - error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.
Type 'undefined' is not assignable to type 'number'.

132 {Math.round(service.responseTime)}ms
~~~~~~~~~~~~~~~~~~~~

components/HealthStatusDashboard.tsx:26:50 - error TS2614: Module '"../services/healthCheckService"' has no exported member 'HealthCheckResult'. Did you mean to use 'import HealthCheckResult from "../services/healthCheckService"' instead?

26 import healthCheckService, { SystemHealthStatus, HealthCheckResult } from '../services/healthCheckService';
~~~~~~~~~~~~~~~~~

components/HealthStatusDashboard.tsx:215:67 - error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.
Type 'undefined' is not assignable to type 'number'.

215 <span className="font-medium">{formatResponseTime(service.responseTime)}</span>
~~~~~~~~~~~~~~~~~~~~

components/HealthStatusDashboard.tsx:220:29 - error TS2769: No overload matches this call.
Overload 1 of 4, '(value: string | number | Date): Date', gave the following error.
Argument of type 'number | undefined' is not assignable to parameter of type 'string | number | Date'.
Type 'undefined' is not assignable to type 'string | number | Date'.
Overload 2 of 4, '(value: string | number): Date', gave the following error.
Argument of type 'number | undefined' is not assignable to parameter of type 'string | number'.
Type 'undefined' is not assignable to type 'string | number'.

220 {new Date(service.timestamp).toLocaleTimeString()}
~~~~~~~~~~~~~~~~~

components/HealthStatusIndicator.tsx:25:62 - error TS2307: Cannot find module '../contexts/HealthContext' or its corresponding type declarations.

25 import { useHealth, useHealthStatus, useHealthMetrics } from '../contexts/HealthContext';
~~~~~~~~~~~~~~~~~~~~~~~~~~~

components/NextLayout.tsx:52:9 - error TS2322: Type '{ isMobileOpen: boolean; onMobileClose: () => void; }' is not assignable to type 'IntrinsicAttributes'.
Property 'isMobileOpen' does not exist on type 'IntrinsicAttributes'.

52 isMobileOpen={isMobileSidebarOpen}
~~~~~~~~~~~~

components/NotificationPanel.tsx:39:12 - error TS2678: Type '"project"' is not comparable to type 'NotificationType'.

39 case 'project': return <FolderOpen className="w-5 h-5 text-makrx-teal" />;
~~~~~~~~~

components/NotificationPanel.tsx:146:61 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

146 !notification.read ? getPriorityColor(notification.priority) : 'border-border'
~~~~~~~~~~~~~~~~~~~~~

components/NotificationPanel.tsx:178:49 - error TS2339: Property 'actionLabel' does not exist on type 'Notification'.

178 {notification.actionLabel || 'View'}
~~~~~~~~~~~

components/NotificationWidget.tsx:36:12 - error TS2678: Type '"project"' is not comparable to type 'NotificationType'.

36 case 'project':
~~~~~~~~~

components/ProjectFiles.tsx:342:67 - error TS2322: Type '{ className: string; title: string; }' is not assignable to type 'IntrinsicAttributes & Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>'.
Property 'title' does not exist on type 'IntrinsicAttributes & Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>'.

342 <Globe className="h-3 w-3 text-green-600" title="Public file" />
~~~~~

components/ProjectFiles.tsx:475:15 - error TS2322: Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.

475 repoUrl={githubRepoUrl}
~~~~~~~

components/GitHubIntegration.tsx:54:3
54 repoUrl: string;
~~~~~~~
The expected type comes from property 'repoUrl' which is declared here on type 'IntrinsicAttributes & GitHubIntegrationProps'

components/ProtectedRoute.tsx:100:12 - error TS2551: Property 'role' does not exist on type 'MakrXUser'. Did you mean 'roles'?

100 user.role || 'user',
~~~~

../../packages/auth/src/types.ts:8:3
8 roles: string[];
~~~~~
'roles' is declared here.

components/ProtectedRoute.tsx:111:49 - error TS2551: Property 'role' does not exist on type 'MakrXUser'. Did you mean 'roles'?

111 const adminPermissions = hasPermission(user.role || 'user', 'admin', adminFeature);
~~~~

../../packages/auth/src/types.ts:8:3
8 roles: string[];
~~~~~
'roles' is declared here.

components/ReservationWithBilling.tsx:179:23 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

179 if (!accessCheck?.allowed) {
~~~~~~~

components/ReservationWithBilling.tsx:194:40 - error TS2339: Property 'estimated_total' does not exist on type 'CostEstimate'.

194 if (costEstimate && costEstimate.estimated_total > 0) {
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:199:24 - error TS2339: Property 'estimated_total' does not exist on type 'CostEstimate'.

199 costEstimate.estimated_total,
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:201:24 - error TS2339: Property 'equipment_name' does not exist on type 'CostEstimate'.

201 costEstimate.equipment_name
~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:385:42 - error TS2339: Property 'status' does not exist on type 'UserSubscription'.

385 {userSubscription?.status === 'active' ? (
~~~~~~

components/ReservationWithBilling.tsx:388:45 - error TS2339: Property 'plan_name' does not exist on type 'UserSubscription'.

388 {userSubscription.plan_name}
~~~~~~~~~

components/ReservationWithBilling.tsx:409:47 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

409 <Alert className={accessCheck.allowed ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>
~~~~~~~

components/ReservationWithBilling.tsx:411:34 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

411 {accessCheck.allowed ? (
~~~~~~~

components/ReservationWithBilling.tsx:416:62 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

416 <AlertDescription className={accessCheck.allowed ? 'text-green-800' : 'text-red-800'}>
~~~~~~~

components/ReservationWithBilling.tsx:417:36 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

417 {accessCheck.allowed ? 'Access approved' : accessCheck.reason}
~~~~~~~

components/ReservationWithBilling.tsx:420:33 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

420 {!accessCheck.allowed && accessCheck.required_action && (
~~~~~~~

components/ReservationWithBilling.tsx:420:56 - error TS2339: Property 'required_action' does not exist on type 'AccessCheckResult'.

420 {!accessCheck.allowed && accessCheck.required_action && (
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:423:38 - error TS2339: Property 'required_action' does not exist on type 'AccessCheckResult'.

423 {accessCheck.required_action === 'upgrade_subscription' && 'Upgrade Plan'}
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:424:38 - error TS2339: Property 'required_action' does not exist on type 'AccessCheckResult'.

424 {accessCheck.required_action === 'add_funds' && 'Add Funds'}
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:425:38 - error TS2339: Property 'required_action' does not exist on type 'AccessCheckResult'.

425 {accessCheck.required_action === 'get_approval' && 'Request Approval'}
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:443:42 - error TS2339: Property 'estimated_total' does not exist on type 'CostEstimate'.

443 ₹{costEstimate.estimated_total.toFixed(2)}
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:456:39 - error TS2339: Property 'split' does not exist on type '{ label: string; amount: number; }'.

456 <span>{line.split(':')[0]}:</span>
~~~~~

components/ReservationWithBilling.tsx:457:39 - error TS2339: Property 'split' does not exist on type '{ label: string; amount: number; }'.

457 <span>{line.split(':')[1]}</span>
~~~~~

components/ReservationWithBilling.tsx:462:35 - error TS2339: Property 'daily_cap_reached' does not exist on type 'CostEstimate'.

462 {costEstimate.daily_cap_reached && (
~~~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:515:39 - error TS2339: Property 'allowed' does not exist on type 'AccessCheckResult'.

515 disabled={!accessCheck?.allowed || isLoading}
~~~~~~~

components/ReservationWithBilling.tsx:530:49 - error TS2339: Property 'estimated_total' does not exist on type 'CostEstimate'.

530 {costEstimate && costEstimate.estimated_total > 0 ? (
~~~~~~~~~~~~~~~

components/ReservationWithBilling.tsx:533:53 - error TS2339: Property 'estimated_total' does not exist on type 'CostEstimate'.

533 Pay & Reserve (₹{costEstimate.estimated_total.toFixed(2)})
~~~~~~~~~~~~~~~

components/UserBillingDashboard.tsx:128:11 - error TS2353: Object literal may only specify known properties, and 'last_updated' does not exist in type 'UserWallet | ((prevState: UserWallet | null) => UserWallet | null)'.

128 last_updated: new Date().toISOString()
~~~~~~~~~~~~

components/UserBillingDashboard.tsx:188:61 - error TS2339: Property 'last_updated' does not exist on type 'UserWallet'.

188 Last updated: {wallet ? formatDate(wallet.last_updated) : 'N/A'}
~~~~~~~~~~~~

components/UserBillingDashboard.tsx:202:32 - error TS2339: Property 'status' does not exist on type 'UserSubscription'.

202 {subscription?.status === 'active' ? (
~~~~~~

components/UserBillingDashboard.tsx:204:82 - error TS2339: Property 'plan_name' does not exist on type 'UserSubscription'.

204 <p className="text-lg font-bold text-blue-600">{subscription.plan_name}</p>
~~~~~~~~~

components/UserBillingDashboard.tsx:206:57 - error TS2339: Property 'end_date' does not exist on type 'UserSubscription'.

206 Expires: {formatDate(subscription.end_date)}
~~~~~~~~

components/UserBillingDashboard.tsx:216:60 - error TS2339: Property 'status' does not exist on type 'UserSubscription'.

216 <Crown className={`h-12 w-12 ${subscription?.status === 'active' ? 'text-blue-500' : 'text-gray-400'}`} />
~~~~~~

components/UserBillingDashboard.tsx:331:30 - error TS2339: Property 'status' does not exist on type 'UserSubscription'.

331 {subscription?.status === 'active' ? (
~~~~~~

components/UserBillingDashboard.tsx:336:37 - error TS2339: Property 'plan_name' does not exist on type 'UserSubscription'.

336 {subscription.plan_name}
~~~~~~~~~

components/UserBillingDashboard.tsx:350:60 - error TS2339: Property 'start_date' does not exist on type 'UserSubscription'.

350 <span>{formatDate(subscription.start_date)}</span>
~~~~~~~~~~

components/UserBillingDashboard.tsx:354:60 - error TS2339: Property 'end_date' does not exist on type 'UserSubscription'.

354 <span>{formatDate(subscription.end_date)}</span>
~~~~~~~~

components/billing/PricingConfigForm.tsx:88:9 - error TS2698: Spread types may only be created from object types.

88 ...prev[section as keyof typeof prev],
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

components/billing/PricingConfigForm.tsx:98:9 - error TS2698: Spread types may only be created from object types.

98 ...prev[section as keyof typeof prev],
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

components/maintenance/DowntimeTimeline.tsx:35:9 - error TS2322: Type '{ id: any; equipment_name: any; type: any; status: any; priority: any; start_time: Date; end_time: Date | null; duration_hours: number | null; impact_level: "critical" | "low" | "medium" | "high"; description: any; cost: any; }[]' is not assignable to type 'DowntimeEvent[]'.
Type '{ id: any; equipment_name: any; type: any; status: any; priority: any; start_time: Date; end_time: Date | null; duration_hours: number | null; impact_level: "critical" | "low" | "medium" | "high"; description: any; cost: any; }' is not assignable to type 'DowntimeEvent'.
Types of property 'end_time' are incompatible.
Type 'Date | null' is not assignable to type 'Date | undefined'.

35 const downtimeEvents: DowntimeEvent[] = logs
~~~~~~~~~~~~~~

components/maintenance/MaintenanceLogModal.tsx:390:21 - error TS2322: Type 'Date | null' is not assignable to type 'Date | undefined'.
Type 'null' is not assignable to type 'Date | undefined'.

390 selected={formData.scheduled_date}
~~~~~~~~

components/maintenance/MaintenanceLogModal.tsx:391:53 - error TS2345: Argument of type '(prev: { equipment_id: string; type: string; status: string; priority: string; title: string; description: string; assigned_to: string; scheduled_date: Date | null; estimated_duration: string; ... 4 more ...; attachments: File[]; }) => { ...; }' is not assignable to parameter of type 'SetStateAction<{ equipment_id: string; type: string; status: string; priority: string; title: string; description: string; assigned_to: string; scheduled_date: Date | null; estimated_duration: string; ... 4 more ...; attachments: File[]; }>'.
Type '(prev: { equipment_id: string; type: string; status: string; priority: string; title: string; description: string; assigned_to: string; scheduled_date: Date | null; estimated_duration: string; ... 4 more ...; attachments: File[]; }) => { ...; }' is not assignable to type '(prevState: { equipment_id: string; type: string; status: string; priority: string; title: string; description: string; assigned_to: string; scheduled_date: Date | null; estimated_duration: string; ... 4 more ...; attachments: File[]; }) => { ...; }'.
Call signature return types '{ scheduled_date: Date | undefined; equipment_id: string; type: string; status: string; priority: string; title: string; description: string; assigned_to: string; estimated_duration: string; ... 4 more ...; attachments: File[]; }' and '{ equipment_id: string; type: string; status: string; priority: string; title: string; description: string; assigned_to: string; scheduled_date: Date | null; estimated_duration: string; ... 4 more ...; attachments: File[]; }' are incompatible.
The types of 'scheduled_date' are incompatible between these types.
Type 'Date | undefined' is not assignable to type 'Date | null'.
Type 'undefined' is not assignable to type 'Date | null'.

391 onSelect={(date) => setFormData(prev => ({ ...prev, scheduled_date: date }))}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

components/maintenance/MaintenanceStatsWidget.tsx:46:31 - error TS7006: Parameter 'item' implicitly has an 'any' type.

46 const existing = acc.find(item => item.name === log.type);
~~~~

components/maintenance/MaintenanceStatsWidget.tsx:56:31 - error TS7006: Parameter 'item' implicitly has an 'any' type.

56 const existing = acc.find(item => item.name === log.priority);
~~~~

components/maintenance/MaintenanceStatsWidget.tsx:67:31 - error TS7006: Parameter 'item' implicitly has an 'any' type.

67 const existing = acc.find(item => item.month === month);
~~~~

components/maintenance/MaintenanceStatsWidget.tsx:239:32 - error TS7006: Parameter 'priority' implicitly has an 'any' type.

239 {priorityData.map((priority, index) => {
~~~~~~~~

components/maintenance/MaintenanceStatsWidget.tsx:239:42 - error TS7006: Parameter 'index' implicitly has an 'any' type.

239 {priorityData.map((priority, index) => {
~~~~~

components/modals/AddMemberModal.tsx:61:9 - error TS2322: Type 'string[]' is not assignable to type '{ id: string; name: string; }[]'.
Type 'string' is not assignable to type '{ id: string; name: string; }'.

61 skills: formData.skills ? formData.skills.split(',').map(s => s.trim()) : [],
~~~~~~

contexts/MemberContext.tsx:25:3
25 skills?: { id: string; name: string }[];
~~~~~~
The expected type comes from property 'skills' which is declared here on type 'Partial<Member>'

components/modals/EditMemberModal.tsx:41:9 - error TS2322: Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.

41 firstName: member.firstName,
~~~~~~~~~

components/modals/EditMemberModal.tsx:42:9 - error TS2322: Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.

42 lastName: member.lastName,
~~~~~~~~

components/modals/EditMemberModal.tsx:43:9 - error TS2322: Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.

43 email: member.email,
~~~~~

components/modals/EditMemberModal.tsx:45:9 - error TS2322: Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.

45 role: member.role,
~~~~

components/modals/EditMemberModal.tsx:46:9 - error TS2322: Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.

46 membership_plan_id: member.membership_plan_id,
~~~~~~~~~~~~~~~~~~

components/modals/EditMemberModal.tsx:47:17 - error TS18048: 'member.skills' is possibly 'undefined'.

47 skills: member.skills.join(', '),
~~~~~~~~~~~~~

components/modals/EditMemberModal.tsx:78:9 - error TS2322: Type 'string[]' is not assignable to type '{ id: string; name: string; }[]'.

78 skills: formData.skills ? formData.skills.split(',').map(s => s.trim()) : [],
~~~~~~

contexts/MemberContext.tsx:25:3
25 skills?: { id: string; name: string }[];
~~~~~~
The expected type comes from property 'skills' which is declared here on type 'Partial<Member>'

components/modals/InviteMemberModal.tsx:57:24 - error TS2345: Argument of type '{ email: string; role: string; membership_plan_id: string; }' is not assignable to parameter of type 'string'.

57 await sendInvite({
~
58 email: formData.email,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
...
60 membership_plan_id: formData.membership_plan_id,
```

61 });

```

components/modals/InviteMemberModal.tsx:191:31 - error TS18048: 'selectedPlan.features' is possibly 'undefined'.

191 <p>Features: {selectedPlan.features.slice(0, 2).join(', ')}{selectedPlan.features.length > 2 ? '...' : ''}</p>
```

components/modals/InviteMemberModal.tsx:191:77 - error TS18048: 'selectedPlan.features' is possibly 'undefined'.

191 <p>Features: {selectedPlan.features.slice(0, 2).join(', ')}{selectedPlan.features.length > 2 ? '...' : ''}</p>

```

components/modals/MemberDetailsModal.tsx:111:31 - error TS18048: 'member.credits_used' is possibly 'undefined'.

111 const membershipProgress = (member.credits_used / (member.credits_used + member.credits_remaining)) \* 100;
~~~~~~~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:111:54 - error TS18048: 'member.credits_used' is possibly 'undefined'.

111 const membershipProgress = (member.credits_used / (member.credits_used + member.credits_remaining)) \* 100;
~~~~~~~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:111:76 - error TS18048: 'member.credits_remaining' is possibly 'undefined'.

111 const membershipProgress = (member.credits_used / (member.credits_used + member.credits_remaining)) \* 100;
```

components/modals/MemberDetailsModal.tsx:128:18 - error TS18048: 'member.firstName' is possibly 'undefined'.

128 {member.firstName[0]}{member.lastName[0]}

```

components/modals/MemberDetailsModal.tsx:128:39 - error TS18048: 'member.lastName' is possibly 'undefined'.

128 {member.firstName[0]}{member.lastName[0]}
~~~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:138:32 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

138 {getStatusIcon(member.status)}
~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:142:33 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

142 {getStatusBadge(member.status)}
~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:143:31 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

143 {getRoleBadge(member.role)}
~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:162:44 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

162 <span>Joined {formatDate(member.join_date)}</span>
```

components/modals/MemberDetailsModal.tsx:211:36 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

211 {getStatusIcon(member.status)}

```

components/modals/MemberDetailsModal.tsx:212:52 - error TS18048: 'member.status' is possibly 'undefined'.

212 <span className="font-medium">{member.status.charAt(0).toUpperCase() + member.status.slice(1)}</span>
```

components/modals/MemberDetailsModal.tsx:212:92 - error TS18048: 'member.status' is possibly 'undefined'.

212 <span className="font-medium">{member.status.charAt(0).toUpperCase() + member.status.slice(1)}</span>

```

components/modals/MemberDetailsModal.tsx:217:58 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

217 <p className="font-medium">{formatDate(member.start_date)}</p>
```

components/modals/MemberDetailsModal.tsx:221:58 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

221 <p className="font-medium">{formatDate(member.end_date)}</p>

```

components/modals/MemberDetailsModal.tsx:229:79 - error TS18048: 'member.credits_used' is possibly 'undefined'.

229 <p className="text-sm font-medium">{member.credits_used} / {member.credits_used + member.credits_remaining}</p>
```

components/modals/MemberDetailsModal.tsx:229:101 - error TS18048: 'member.credits_remaining' is possibly 'undefined'.

229 <p className="text-sm font-medium">{member.credits_used} / {member.credits_used + member.credits_remaining}</p>

```

components/modals/MemberDetailsModal.tsx:242:12 - error TS18048: 'member.skills' is possibly 'undefined'.

242 {member.skills.length > 0 && (
~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:251:20 - error TS18048: 'member.skills' is possibly 'undefined'.

251 {member.skills.map((skill, index) => (
~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:253:23 - error TS2322: Type '{ id: string; name: string; }' is not assignable to type 'ReactNode'.

253 {skill}
~~~~~~~

../../node_modules/@types/react/index.d.ts:2398:9
2398 children?: ReactNode | undefined;
~~~~~~~~
The expected type comes from property 'children' which is declared here on type 'IntrinsicAttributes & BadgeProps'

components/modals/MemberDetailsModal.tsx:273:29 - error TS2339: Property 'last_login' does not exist on type 'Member'.

273 {member.last_login ? formatDateTime(member.last_login) : 'Never'}
~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:273:64 - error TS2339: Property 'last_login' does not exist on type 'Member'.

273 {member.last_login ? formatDateTime(member.last_login) : 'Never'}
~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:278:58 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.

278 <p className="font-medium">{formatDate(member.join_date)}</p>
~~~~~~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:311:47 - error TS18048: 'member.role' is possibly 'undefined'.

311 <p className="font-medium">{member.role.replace('\_', ' ').toUpperCase()}</p>
~~~~~~~~~~~

components/modals/MemberDetailsModal.tsx:315:54 - error TS2339: Property 'is_active' does not exist on type 'Member'.

315 <p className="font-medium">{member.is_active ? 'Active' : 'Inactive'}</p>
~~~~~~~~~

components/settings/AppearanceCustomizer.tsx:588:22 - error TS2532: Object is possibly 'undefined'.

588 {settings.theme_mode?.charAt(0).toUpperCase() + settings.theme_mode?.slice(1) || 'Light'}
```

components/settings/AppearanceCustomizer.tsx:588:69 - error TS2532: Object is possibly 'undefined'.

588 {settings.theme_mode?.charAt(0).toUpperCase() + settings.theme_mode?.slice(1) || 'Light'}

```

services/apiService.ts:8:9 - error TS2322: Type '{ 'Content-Type': string; } | { length: number; toString: (() => string) & (() => string); toLocaleString: (() => string) & (() => string); pop(): [string, string] | undefined; push(...items: [string, string][]): number; ... 30 more ...; 'Content-Type': string; } | { ...; }' is not assignable to type 'Record<string, string>'.
Type '{ length: number; toString: (() => string) & (() => string); toLocaleString: (() => string) & (() => string); pop(): [string, string] | undefined; push(...items: [string, string][]): number; concat(...items: ConcatArray<...>[]): [...][]; concat(...items: ([...] | ConcatArray<...>)[]): [...][]; ... 29 more ...; 'Cont...' is not assignable to type 'Record<string, string>'.
Property 'length' is incompatible with index signature.
Type 'number' is not assignable to type 'string'.

8 const headers: Record<string, string> = {
~~~~~~~

Found 151 errors in 36 files.

Errors Files
7 app/members/page.tsx:420
1 app/profile/page.tsx:130
1 app/project-detail/page.tsx:522
5 app/skill-management/page.tsx:122
1 app/system-health/page.tsx:80
1 components/AddItemModal.tsx:336
1 components/BOMManagement.tsx:490
2 components/EnhancedMembershipManagement.tsx:645
5 components/EquipmentAccessPricingManager.tsx:137
2 components/EquipmentPolicyManager.tsx:121
2 components/EquipmentRating.tsx:330
1 components/EquipmentSkillRequirements.tsx:142
9 components/FeatureFlaggedDashboard.tsx:198
14 components/FeatureFlaggedHeader.tsx:51
2 components/Header.tsx:225
2 components/HeaderWithHealth.tsx:30
2 components/HealthCheckTest.tsx:103
3 components/HealthStatusDashboard.tsx:26
1 components/HealthStatusIndicator.tsx:25
1 components/NextLayout.tsx:52
3 components/NotificationPanel.tsx:39
1 components/NotificationWidget.tsx:36
2 components/ProjectFiles.tsx:342
2 components/ProtectedRoute.tsx:100
22 components/ReservationWithBilling.tsx:179
10 components/UserBillingDashboard.tsx:128
2 components/billing/PricingConfigForm.tsx:88
1 components/maintenance/DowntimeTimeline.tsx:35
2 components/maintenance/MaintenanceLogModal.tsx:390
5 components/maintenance/MaintenanceStatsWidget.tsx:46
1 components/modals/AddMemberModal.tsx:61
7 components/modals/EditMemberModal.tsx:41
3 components/modals/InviteMemberModal.tsx:57
24 components/modals/MemberDetailsModal.tsx:111
2 components/settings/AppearanceCustomizer.tsx:588
1 services/apiService.ts:8
npm error Lifecycle script `type-check` failed with error:
npm error code 2
npm error path /home/adit/Downloads/MakrX-AI/makrx-ecosystem-unified/apps/makrcave
npm error workspace @makrx/makrcave@1.0.0
npm error location /home/adit/Downloads/MakrX-AI/makrx-ecosystem-unified/apps/makrcave
npm error command failed
npm error command sh -c tsc --noEmit
```
