Key Findings

Frontend API client mismatch: apps/makrx-store/src/lib/api.ts targets non-existent paths (missing /api prefix, wrong segments) and contains mock fallback logic. Many store pages import and use this client.
Alternate API client exists: apps/makrx-store/src/services/storeApi.ts aligns with the store backend (/api/\*) but is barely used in pages.
Next.js API routes missing: Several pages call Next /api/catalog/... that don’t exist; the backend provides these under /api/enhanced-catalog/catalog/....
Backend gaps: Some endpoints expected by the frontend don’t exist (admin stats, notifications settings), or use different shapes (no product slug endpoint).
Provider dashboard endpoints: Frontend calls /api/v1/providers/...; the provider service exposes /api/v1/provider/... (singular) and is a different backend entirely.
Mock/placeholder usage: Store app still includes mock fallback in api.ts. Other apps (MakrCave, Events) include mock data in UI components.
Frontend API Client (apps/makrx-store/src/lib/api.ts)

Wrong base routes used across methods (examples):
getProducts → calls /catalog/products… but backend is /api/products (store)
backends/makrx-store/routes/catalog.py:14,72
getCategories → /catalog/categories vs /api/categories (store)
backends/makrx-store/routes/catalog.py:118
getProductBySlug → /catalog/products/slug/:slug does not exist in store backend. No slug route found; requires new backend route or use enhanced search by slug.
healthCheck → /health is OK (store)
backends/makrx-store/routes/health.py:13
checkout → /orders/checkout needs /api/orders/checkout
backends/makrx-store/routes/orders.py:132
cart → all need /api/cart* not /cart*
backends/makrx-store/routes/cart.py:21,88,154,188
uploads → need /api/uploads/sign|complete|:id not /uploads/_
backends/makrx-store/routes/uploads.py:268,329,464
quotes → /api/quotes not /quotes; materials are under /api/quotes/materials/
backends/makrx-store/routes/quotes.py:318,426,436,446
service-orders → /api/service-orders not /service-orders
backends/makrx-store/main.py:126
auth/me → /api/auth/me not /auth/me
backends/makrx-store/routes/auth.py:15
admin stats → frontend expects /admin/stats but backend has only /api/admin/dashboard placeholder
apps/makrx-store/src/lib/api.ts:834
backends/makrx-store/routes/admin.py:8
user/notifications (settings) → no backend route exists; methods will 404 if called
apps/makrx-store/src/lib/api.ts:845,852
Mock fallback logic present:
Uses NEXT_PUBLIC_USE_MOCK_DATA and network-error fallback to getMockData<T>().
apps/makrx-store/src/lib/api.ts:210–238, 248–285, 401–429
Contains mock data generators for products, categories, cart, user
apps/makrx-store/src/lib/api.ts:861–1248
Provider APIs in api.ts point to /api/v1/providers/_ and /api/v1/service-orders/_ (wrong service and path):
makrx-services provider routes are /api/v1/provider/_ (singular)
backends/makrx-services/app/routes/providers.py:13,20,76,173,301
Store service-orders are /api/service-orders/\*
backends/makrx-store/routes/service_orders.py:1,29
Where the frontend uses the wrong client/paths

Frontend imports api (lib/api.ts) widely:
Checkout/cart/orders/product pages, upload/quote flows, order tracking, header, components
apps/makrx-store/src/app/checkout/page.tsx:21
apps/makrx-store/src/app/cart/page.tsx (multiple)
apps/makrx-store/src/app/order/confirmation/[id]/page.tsx:21
apps/makrx-store/src/app/product/[slug]/page.tsx:23
apps/makrx-store/src/app/3d-printing/page.tsx:30
apps/makrx-store/src/app/3d-printing/enhanced-page.tsx:26
apps/makrx-store/src/components/FileProcessingStatus.tsx:4
apps/makrx-store/src/components/RealTimeOrderStatus.tsx:4
apps/makrx-store/src/components/layout/Header.tsx:17
Pages call non-existent Next API routes under /api/catalog/\*:
apps/makrx-store/src/app/(catalog)/c/page.tsx:26,31
apps/makrx-store/src/app/(search)/brands/page.tsx:30
apps/makrx-store/src/app/(search)/brands/[slug]/page.tsx:61
apps/makrx-store/src/app/(search)/tags/[slug]/page.tsx:68
apps/makrx-store/src/app/(search)/collections/[slug]/page.tsx:62,70
Backend provides these under /api/enhanced-catalog/catalog/...
backends/makrx-store/routes/enhanced_catalog_routes.py:62,191,231,282,374,468
backends/makrx-store/routes/enhanced_catalog.py:1,84
There is only a GET /api/health in Next app:
apps/makrx-store/src/app/api/health/route.ts:3
NotificationContext uses api methods that don’t exist:
api.getNotifications, api.markNotificationAsRead, api.markAllNotificationsAsRead are called but not implemented in lib/api.ts
apps/makrx-store/src/contexts/NotificationContext.tsx:108,168,178
Backend Endpoint Gaps (store)

Admin stats endpoint missing; only a “implementation needed” dashboard exists.
backends/makrx-store/routes/admin.py:8
Product lookup by slug missing; frontend expects GET /catalog/products/slug/:slug
No slug route found in store backend. Use enhanced search or add slug route.
User notifications (settings or items) APIs not present; frontend references /user/notifications.
Provider Service (makrx-services)

Exposes /api/v1/provider/_ (singular).
backends/makrx-services/app/routes/providers.py:20,76,173,301
Frontend api.ts targets /api/v1/providers/_ (plural) and uses the store API base URL; this will fail and hit the wrong service. Provider calls require a separate NEXT_PUBLIC_SERVICES_API_URL base and path fix.
Mock/Placeholder Usage

Store: mock fallback in lib/api.ts only (see above). Needs to be disabled/removed for production.
Store: explicit TODOs/coming soon
apps/makrx-store/src/app/account/notifications/page.tsx:46
apps/makrx-store/src/components/admin/ComprehensiveStoreDashboard.tsx:578
apps/makrx-store/src/components/admin/SuperAdminDashboard.tsx:366
MakrCave and MakrX Events apps: mock data used in many components (non-store)
apps/makrcave/components/EquipmentRating.tsx:102–121
apps/makrcave/components/InteractiveMap.tsx:48,84,119,154,159
apps/makrcave/components/learning/CoursePlayer.tsx:106,146,151,156,244
apps/makrx-events/components/microsite/SectionRenderer.tsx:136–312
These are outside the store app but worth tracking if going production-wide.
Recommended Fixes

Unify on a single API client for the store:
Option A (minimal refactor): Update apps/makrx-store/src/lib/api.ts to correct all paths to /api/_, add separate base for provider service (NEXT_PUBLIC_SERVICES_API_URL), and remove mock fallback in production.
Option B (cleaner): Migrate imports to apps/makrx-store/src/services/storeApi.ts (already aligned to /api/_) and extend it to cover uploads/quotes/enhanced-catalog. Then delete/deprecate lib/api.ts.
Correct page fetches that call missing Next routes:
Replace fetch('/api/catalog/...') with calls to the backend:
Use the API client methods you add for:
Brands list/details
Collections list/details/products
Tags popular/details
Categories tree
Or directly fetch ${API_BASE_URL}/api/enhanced-catalog/catalog/... with proper headers.
Provider Dashboard integration:
Split provider APIs to a new client with base process.env.NEXT_PUBLIC_SERVICES_API_URL and paths /api/v1/provider/\*.
Update usages in apps/makrx-store/src/app/provider-dashboard/page.tsx to:
getAvailableJobs (not getAvailableProviders)
GET /provider/jobs and GET /provider/jobs/available
POST /provider/jobs/{id}/accept
GET/PATCH /provider/inventory
Close backend gaps or gate features:
Implement admin stats endpoint the frontend needs or gate the UI behind a feature flag until ready.
Implement product-by-slug on store backend, or change the product page to resolve ID via enhanced search by slug.
Implement user notifications or disable NotificationContext polling behind NEXT_PUBLIC_NOTIFICATIONS_ENABLED=false.
Remove mock fallback for production:
Ensure NEXT_PUBLIC_USE_MOCK_DATA is ignored/false in production, and remove network-error automatic mock fallback. Hard-fail so integration issues surface.
Consistency and env:
Add NEXT_PUBLIC_API_URL to point to the store backend (8003 in dev) and NEXT_PUBLIC_SERVICES_API_URL for the provider service.
Standardize all calls through clients to enforce Authorization header and session handling.
Concrete Change Plan (suggested)

Update lib/api.ts to correct paths; remove mock fallback in production:
Prefix all store endpoints with /api.
Change getMaterials() to /api/quotes/materials/.
Change getServiceCapabilities() to a valid path or remove until implemented.
Change auth to /api/auth/me.
Change orders, cart, uploads, quotes, service-orders to /api/_.
Add a separate provider client base: const SERVICES_BASE = process.env.NEXT_PUBLIC_SERVICES_API_URL || 'http://localhost:PORT'; and update provider methods to /api/v1/provider/_.
Block mock fallback unless NODE_ENV!=='production' and NEXT_PUBLIC_USE_MOCK_DATA==='true'; do not auto-fallback on network errors.
Add enhanced catalog methods to the client:
getBrands, getBrand, getCollections, getCollection, getCollectionProducts, getPopularTags, advancedSearch, getCategoryTree → hit /api/enhanced-catalog/catalog/....
Update pages that currently fetch /api/catalog/... to use these client methods.
Gate or remove unimplemented features:
Notification settings page: hide API calls or guard with NEXT_PUBLIC_NOTIFICATIONS_ENABLED.
Notification polling in NotificationContext: guard with the same flag to avoid calling non-existent endpoints.
Optionally, add a backend slug product route:
GET /api/products/slug/{slug} for parity, or document the change to fetch by ID via enhanced search.
If you want, I can start by:

Patching apps/makrx-store/src/lib/api.ts to correct paths, add enhanced-catalog methods, separate provider base, and disable mock fallback in production.
Refactoring pages that call missing Next /api/catalog/\* routes to use the corrected client.
Adding a small services/providerApi.ts to isolate provider-service calls.

I’ve mapped the makrx-events app, reviewed pages, API routes, libs, and components. Below are concrete findings and a prioritized launch checklist.

Architecture & Setup

Next.js: 14.2.x app router with many API routes under app/api/\* and client-heavy pages/components.
DB: Drizzle ORM with a Neon serverless client wrapper in apps/makrx-events/lib/db.ts.
Auth: Keycloak SSO via @makrx/auth; login/callback endpoints exist.
Styling/UI: Tailwind + shadcn-esque components under components/ui.
Rate limiting: Upstash optional fallback to in-memory.
Realtime: WebSocket client and server files present but not integrated with Next server.

Critical Blockers

DB client mismatch: apps/makrx-events/lib/db.ts imports Pool from @neondatabase/serverless and uses drizzle-orm/neon-serverless. Typical patterns are either:
Neon HTTP: import { neon } from '@neondatabase/serverless' + drizzle(neon(DATABASE_URL)), or
Node pg: import { Pool } from 'pg' + drizzle(pool).
Without fixing this, all DB-backed API routes will error.
Schema vs code divergence: Many API routes and services assume columns that don’t exist in packages/shared/src/schema.ts.
Payments: Code expects paymentTransactions.eventId, userId, currency, paymentMethod, transactionId, gatewayOrderId, gatewayPaymentId, completedAt, error, metadata etc. Schema only has registrationId, amount, status, createdAt. Breaks payment flows.
Registrations: Code references eventRegistrations.type and other fields not in schema.
Email: emailTemplates fields in code (htmlContent, textContent) don’t exist; schema has body only. Queue code assumes emailQueue.recipient, priority, scheduledFor, metadata; schema defines to, subject, body, scheduledAt.
Payments inconsistent and incomplete:
Stripe client exists (components/payment/StripePaymentForm.tsx) but no app/api/payments/create-payment-intent route.
Razorpay order route exists (apps/makrx-events/app/api/payments/create-order/route.ts), but uses VITE_RAZORPAY_KEY_ID env naming and returns client-side config; Stripe + Razorpay conflict. Needs one coherent path.
Heavy mock usage in API and pages: Numerous public endpoints return mock data:
Microsites (details, sections, events, analytics, registrations, event sub-slug endpoints): apps/makrx-events/app/api/microsites/\*.
Check-ins: mock-based apps/makrx-events/app/api/registrations/[id]/check-in/route.ts.
Sitemaps: mock microsites in apps/makrx-events/app/sitemap.ts:7.
Frontend pages for microsites and sub-events render with static/mock content.
Launching with these will mislead users or break expectations unless marketed as demo.
Nodemailer bug: apps/makrx-events/lib/email-service.ts uses nodemailer.createTransporter(...). Correct API is createTransport(...). As written, it will crash.
WebSocket server integration: lib/websocket-service.ts starts a ws server, but Next app does not expose a custom HTTP server to attach it; the client hooks connect to /ws which likely 404s. Not wired for production.

High Priority Issues

CSP risks: apps/makrx-events/next.config.js sets stringent CSP in prod: style-src 'self'. UI uses Tailwind; inline styles and certain third-party scripts (Stripe/Razorpay) will need allowances ('unsafe-inline', script origins). Payment and analytics integrations typically require more permissive script-src/connect-src.
File uploads: app/api/upload/route.ts writes to public/uploads/\*. In serverless or containerized ephemeral FS this is not persistent; production should use cloud storage (S3, R2, etc.) with signed URLs. Current code is fine for demo only.
Auth verification: lib/auth-middleware.ts decodes JWT without signature verification (“simple decode”) and only checks exp. For production, verify with Keycloak JWKS (or use the @makrx/auth server utilities if available).
Env validator vs actual usage mismatch: lib/environment-validator.ts references SESSION_SECRET and Razorpay keys (VITE_RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET), but elsewhere Stripe is used and no session store is implemented. Align on the actual features to launch.
Images: Using <img> with remote URLs. next.config.js images.remotePatterns allow images.unsplash.com and replit.com; other hosts will be blocked.
Medium Priority

Duplicate/legacy components: Two section renderers:
components/microsite/SectionRenderer.tsx (singular, inline mock content),
components/microsites/SectionRenderer.tsx (plural, modular, lazy-loaded).
The page imports the plural version, which is better; the singular one is redundant and mock-heavy.
Admin/analytics routes: Many endpoints under /api/admin/\* compute totals client-side or return placeholder fields. If launch requires analytics, define minimal viable metrics or gate features.
Rate-limit fallback: current in-memory fallback is fine for dev but provides no real protection in prod if Redis isn’t configured.
Websocket client hook: Comprehensive, but without a server endpoint, should be gated or hidden.
Low Priority / Polish

SEO: app/m/[micrositeSlug]/page.tsx sets <title> and meta description inline – consider generateMetadata for better Next integration.
Image optimization: Not using next/image.
Accessibility: Many components likely pass basic checks, but modals/dialogs (Radix) need verification for focus traps and labels.
File References

DB client: apps/makrx-events/lib/db.ts:1
Events API (uses Drizzle with assumed columns): apps/makrx-events/app/api/events/route.ts:1
Participants API (uses non-existent eventRegistrations.type): apps/makrx-events/app/api/events/[eventId]/participants/route.ts:1
Payment service (schema mismatch): apps/makrx-events/lib/payment-service.ts:1
Razorpay order route (Vite env): apps/makrx-events/app/api/payments/create-order/route.ts:1
Stripe form (missing route): apps/makrx-events/components/payment/StripePaymentForm.tsx:1
Nodemailer bug: apps/makrx-events/lib/email-service.ts:1
Mock-heavy APIs: apps/makrx-events/app/api/microsites/\*
Mock sitemap: apps/makrx-events/app/sitemap.ts:7
WebSocket service (not integrated): apps/makrx-events/lib/websocket-service.ts:1
Auth “decode only”: apps/makrx-events/lib/auth-middleware.ts:1
Launch Readiness Assessment

Current state is a demo/prototype with UI scaffolding and numerous mock-backed endpoints.
A production launch requires choosing a payment provider, fixing DB client, aligning schema vs code, replacing mock endpoints with DB implementations, securing auth verification, and moving uploads to cloud storage.
Prioritized Launch Checklist

Database & Schema
Fix Neon/Drizzle client to a supported setup.
Decide the canonical schema for payments, registrations, emails; update either code or packages/shared/src/schema.ts to match. Add missing columns or trim service code accordingly.
Add minimal migrations (if used) to bring DB tables in line.
Authentication
Implement proper Keycloak JWT verification using JWKS (or @makrx/auth server toolkit).
Ensure /api/auth/login and /api/auth/callback use consistent NEXT*PUBLIC_APP_URL and handle error redirects cleanly.
Payments (choose one path)
Stripe path:
Add app/api/payments/create-payment-intent/route.ts that creates PaymentIntents with server secret key.
Set NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY and server STRIPE_SECRET_KEY. Update CSP for https://js.stripe.com, https://api.stripe.com.
Remove Razorpay code for MVP or gate it.
Razorpay path:
Standardize env names (RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET); create client/server flows; update UI to Razorpay Checkout.
Remove Stripe components for MVP.
Replace Mocks with DB-backed Implementations
Microsites: implement CRUD for microsites, sections, sub-events, registrations with actual DB calls; remove mock data in:
app/api/microsites/[slug]/*
app/api/microsites/[slug]/events\_
app/api/microsites/[slug]/registrations
app/api/registrations/[id]/check-in
Events listing (app/api/events/route.ts): align fields with schema and ensure filters map to actual columns.
Sitemaps: generate from DB.
Email
Fix nodemailer.createTransporter → createTransport.
Align templates/queue with schema or update schema to support html/text content and scheduling/priority.
For MVP, send basic transactional email (registration confirmation) or gate until ready.
Uploads
Replace local public/uploads/\* write with cloud storage (e.g., S3 presigned URLs). Gate route if not ready.
CSP, Security, and Env
Relax CSP as needed for Stripe/Razorpay and any analytics; include connect-src for API origins and frame-src if embedding checkout.
Validate envs via environment-validator.ts, remove obsolete entries, and add required ones for auth/payments.
WebSockets
If not launching realtime, hide related UI and remove client auto-connect; else add a WebSocket proxy/server and route in Next.
Cleanup & Consistency
Remove duplicate mock renderer components/microsite/SectionRenderer.tsx if only the modular one is used.
Update apps/makrx-events/README.md to reflect actual API approach (currently references a non-existent src/lib/api.ts and mock fallback behavior).
Recommended Scope for v0 Launch (2–3 weeks)

MVP flows: list events, microsite landing pages, registration (free), dashboards minimal, email confirmation.
Defer payments to v0.1 unless absolutely required (it’s the heaviest integration).
No realtime/websocket in v0; no persistent file uploads beyond small logos to cloud storage.
Environment Variables (proposed minimal)

Database: DATABASE_URL
App base: NEXT_PUBLIC_APP_URL
Auth: KEYCLOAK_BASE_URL, KEYCLOAK_REALM, KEYCLOAK_CLIENT_ID, KEYCLOAK_CLIENT_SECRET
Email (optional): SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SMTP_FROM
Payments (if Stripe): NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY, STRIPE_SECRET_KEY
Payments (if Razorpay): RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET
