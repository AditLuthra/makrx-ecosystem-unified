services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: makrx-unified-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-makrx_ecosystem}
      POSTGRES_USER: ${POSTGRES_USER:-makrx}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-makrx_dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1g
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-makrx} -d ${POSTGRES_DB:-makrx_ecosystem}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: makrx-unified-redis
    volumes:
      - redis_data:/data
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1g
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: makrx-unified-keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
      KC_DB_USERNAME: ${POSTGRES_USER:-makrx}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-makrx_dev_password}
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    volumes:
      - ./services/keycloak/realm-config:/opt/keycloak/data/import
    command: ["start-dev", "--import-realm"]
    ports:
      - "${KEYCLOAK_HTTP_PORT:-8081}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Object Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: makrx-unified-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1g
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Services (for production)
  gateway-frontend:
    build:
      context: .
      dockerfile: apps/gateway-frontend/Dockerfile
    container_name: makrx-gateway-frontend
    environment:
      NODE_ENV: production
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: makrx
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: makrx-gateway-frontend
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
    depends_on:
      - keycloak
      - postgres
      - redis
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway-frontend-hacker:
    build:
      context: .
      dockerfile: apps/gateway-frontend-hacker/Dockerfile
    container_name: makrx-gateway-frontend-hacker
    environment:
      NODE_ENV: production
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: makrx
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: makrx-gateway-frontend-hacker
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
    depends_on:
      - keycloak
      - postgres
      - redis
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  makrcave:
    build:
      context: .
      dockerfile: apps/makrcave/Dockerfile
    container_name: makrx-makrcave
    environment:
      NODE_ENV: production
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: makrx
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: makrx-makrcave
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
    depends_on:
      - keycloak
      - postgres
      - redis
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  makrx-store:
    build:
      context: .
      dockerfile: apps/makrx-store/Dockerfile
    container_name: makrx-store
    environment:
      NODE_ENV: production
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: makrx
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: makrx-store
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    depends_on:
      - keycloak
      - postgres
      - redis
      - minio
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  makrx-events:
    build:
      context: .
      dockerfile: apps/makrx-events/Dockerfile
    container_name: makrx-events
    environment:
      NODE_ENV: production
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: makrx
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: makrx-events
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
    depends_on:
      - keycloak
      - postgres
      - redis
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  makrcave-backend:
    build:
      context: backends/makrcave
      dockerfile: Dockerfile
    container_name: makrx-makrcave-backend
    environment:
      ENVIRONMENT: production
      PORT: 8000
      USE_GUNICORN: "true"
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: makrx
      KEYCLOAK_CLIENT_ID: makrcave-api
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  makrx-events-backend:
    build:
      context: backends/makrx_events
      dockerfile: Dockerfile
    container_name: makrx-events-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: makrx
      KEYCLOAK_CLIENT_ID: makrx-events-api
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      PORT: 5000
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  makrx-store-backend:
    build:
      context: backends/makrx_store
      dockerfile: Dockerfile
    container_name: makrx-store-backend
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-makrx}:${POSTGRES_PASSWORD:-makrx_dev_password}@postgres:5432/${POSTGRES_DB:-makrx_ecosystem}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: makrx
      KEYCLOAK_CLIENT_ID: makrx-store-api
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/makrx
      REDIS_URL: redis://redis:6379/1
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy
  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    container_name: makrx-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - gateway-frontend
      - gateway-frontend-hacker
      - makrcave
      - makrx-store
      - makrx-events
    networks:
      - public-network
      - internal-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
    volumes:
      - ./services/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
      - ./services/nginx/ssl:/etc/nginx/ssl
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  public-network:
    driver: bridge
  internal-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  nginx_logs:
    driver: local
