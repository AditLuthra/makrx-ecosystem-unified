name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        run: npm audit --audit-level=high --production

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          [
            gateway-frontend,
            gateway-frontend-hacker,
            makrcave,
            makrx-store,
            makrx-events,
          ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f "apps/${{ matrix.image }}/Dockerfile" ]; then
            docker build -t ${{ matrix.image }}:test -f apps/${{ matrix.image }}/Dockerfile .
          else
            echo "Dockerfile not found for ${{ matrix.image }}, skipping..."
            exit 0
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ matrix.image }}:test"
          format: "sarif"
          output: "trivy-${{ matrix.image }}.sarif"
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-${{ matrix.image }}.sarif"

  # Infrastructure as Code security scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov against Dockerfiles
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile
          output_format: sarif
          output_file_path: reports/checkov-dockerfile.sarif

      - name: Run Checkov against Docker Compose
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: docker_compose
          output_format: sarif
          output_file_path: reports/checkov-compose.sarif

      - name: Run Checkov against Kubernetes manifests
        uses: bridgecrewio/checkov-action@master
        with:
          directory: k8s/
          framework: kubernetes
          output_format: sarif
          output_file_path: reports/checkov-k8s.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: reports/

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python, typescript

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build applications
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run license check
        run: |
          npx license-checker --production --csv --out licenses.csv
          npx license-checker --production --excludePrivatePackages --summary

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.csv

  # Security headers and configuration check
  security-config:
    name: Security Configuration Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security configurations
        run: |
          echo "🔍 Checking security configurations..."

          # Check for security headers in Next.js config
          if find apps/ -name "next.config.js" -o -name "next.config.mjs" | xargs grep -l "headers" > /dev/null; then
            echo "✅ Security headers found in Next.js config"
          else
            echo "⚠️ No security headers found in Next.js config"
          fi

          # Check for CSP (Content Security Policy)
          if find . -name "*.js" -o -name "*.ts" -o -name "*.json" | xargs grep -l "Content-Security-Policy" > /dev/null; then
            echo "✅ Content Security Policy found"
          else
            echo "⚠️ No Content Security Policy found"
          fi

          # Check for HTTPS redirect
          if find . -name "*.js" -o -name "*.ts" | xargs grep -l "https" > /dev/null; then
            echo "✅ HTTPS configuration found"
          else
            echo "⚠️ No HTTPS configuration found"
          fi

          # Check for secure cookies
          if find . -name "*.js" -o -name "*.ts" | xargs grep -l "secure.*cookie\|httpOnly" > /dev/null; then
            echo "✅ Secure cookie configuration found"
          else
            echo "⚠️ No secure cookie configuration found"
          fi

  # OWASP ZAP Dynamic Security Testing
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_dev_password
          POSTGRES_DB: makrx_ecosystem
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies and start application
        run: |
          npm ci --legacy-peer-deps
          docker-compose up -d redis keycloak minio
          sleep 30
          npm run dev &
          sleep 60

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scan,
        secret-scan,
        container-scan,
        iac-scan,
        sast-scan,
        license-scan,
      ]
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "## Scan Results:" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.iac-scan.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "Scan completed on: $(date)" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md