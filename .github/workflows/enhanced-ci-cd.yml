name: Enhanced MakrX Ecosystem CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-flight checks and caching
  setup:
    runs-on: ubuntu-latest
    name: 'Setup & Cache Dependencies'
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for semantic versioning
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          apps/*/node_modules
          packages/*/node_modules
          ~/.cache/pip
        key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
        restore-keys: |
          deps-${{ runner.os }}-
    
    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        npm ci --legacy-peer-deps
        # Install Python dependencies for validation scripts
        pip install requests psycopg2-binary redis pytest flake8 black

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    name: 'Code Quality & Linting'
    needs: setup
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          apps/*/node_modules
          packages/*/node_modules
        key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    
    - name: TypeScript type checking
      run: |
        npm run type-check --workspaces --if-present || echo "Type checking not available for all workspaces"
    
    - name: Lint JavaScript/TypeScript
      run: |
        npm run lint --workspaces --if-present
    
    - name: Format check (Prettier)
      run: |
        npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}" || echo "Formatting issues detected"
    
    - name: Python code quality
      run: |
        # Check Python backends
        for backend in backends/*; do
          if [ -d "$backend" ] && [ -f "$backend/requirements.txt" ]; then
            echo "Checking $backend"
            cd "$backend"
            pip install -r requirements.txt
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
            black --check . || echo "Python formatting issues in $backend"
            cd ../..
          fi
        done

  # Security and vulnerability scanning
  security:
    runs-on: ubuntu-latest
    name: 'Security Scanning'
    needs: setup
    permissions:
      security-events: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: NPM security audit
      run: |
        npm audit --audit-level=moderate --production || echo "Security vulnerabilities found - review required"
    
    - name: License compliance check
      run: |
        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || echo "License compliance issues detected"
    
    - name: Secret detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # Build and test shared packages
  build-packages:
    runs-on: ubuntu-latest
    name: 'Build & Test Packages'
    needs: [setup, code-quality]
    
    strategy:
      matrix:
        package: [auth, shared-ui, types]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          packages/*/node_modules
        key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    
    - name: Build package ${{ matrix.package }}
      run: |
        cd packages/${{ matrix.package }}
        if [ -f "package.json" ]; then
          npm run build || echo "No build script for ${{ matrix.package }}"
          npm run test || echo "No tests for ${{ matrix.package }}"
        fi
    
    - name: Upload package build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-${{ matrix.package }}
        path: |
          packages/${{ matrix.package }}/dist
          packages/${{ matrix.package }}/lib
        retention-days: 7

  # Build frontend applications
  build-frontends:
    runs-on: ubuntu-latest
    name: 'Build Frontend Apps'
    needs: build-packages
    
    strategy:
      matrix:
        app: [gateway-frontend, gateway-frontend-hacker, makrcave, makrx-store, makrx-events]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          apps/*/node_modules
        key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        path: packages/
        pattern: package-*
        merge-multiple: true
    
    - name: Create environment file
      run: |
        cd apps/${{ matrix.app }}
        cat > .env.local << EOF
        NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8081
        NEXT_PUBLIC_KEYCLOAK_REALM=makrx
        NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=${{ matrix.app }}
        NEXT_PUBLIC_API_URL=http://localhost:8000
        NODE_ENV=production
        EOF
    
    - name: Build frontend ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        npm run build
    
    - name: Run frontend tests
      run: |
        cd apps/${{ matrix.app }}
        npm run test:ci || echo "No tests available for ${{ matrix.app }}"
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-${{ matrix.app }}
        path: |
          apps/${{ matrix.app }}/.next
          apps/${{ matrix.app }}/out
          apps/${{ matrix.app }}/dist
        retention-days: 7

  # Backend testing with services
  test-backends:
    runs-on: ubuntu-latest
    name: 'Test Backend APIs'
    needs: setup
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makrx_test
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_test_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        backend: [makrcave, makrx-events, makrx-store]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python (FastAPI backends)
      if: matrix.backend != 'makrx-events'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js (Express backends)
      if: matrix.backend == 'makrx-events'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install backend dependencies
      run: |
        cd backends/${{ matrix.backend }}
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
        elif [ -f "package.json" ]; then
          npm ci
        fi
    
    - name: Create test environment
      run: |
        cd backends/${{ matrix.backend }}
        cat > .env.test << EOF
        ENVIRONMENT=test
        DATABASE_URL=postgresql://makrx:makrx_test_password@localhost:5433/makrx_test
        REDIS_URL=redis://localhost:6380
        KEYCLOAK_URL=http://localhost:8081
        KEYCLOAK_REALM=makrx
        KEYCLOAK_CLIENT_ID=${{ matrix.backend }}
        SECRET_KEY=test-secret-key-for-ci
        EOF
    
    - name: Run database migrations
      run: |
        cd backends/${{ matrix.backend }}
        if [ -f "alembic.ini" ]; then
          alembic upgrade head
        elif [ -f "migrate.py" ]; then
          python migrate.py
        fi
    
    - name: Run backend tests
      run: |
        cd backends/${{ matrix.backend }}
        if [ -d "tests/" ] || [ -f "test_*.py" ]; then
          pytest -v --tb=short
        elif [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found for ${{ matrix.backend }}"
        fi
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results-${{ matrix.backend }}
        path: |
          backends/${{ matrix.backend }}/test-results/
          backends/${{ matrix.backend }}/coverage.xml
        retention-days: 7

  # Docker build and registry push
  build-docker:
    runs-on: ubuntu-latest
    name: 'Build Docker Images'
    needs: [build-frontends, test-backends, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [gateway-frontend, gateway-frontend-hacker, makrcave, makrx-store, makrx-events, makrcave-backend, makrx-events-backend, makrx-store-backend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ matrix.service == 'makrcave-backend' && 'backends/makrcave/Dockerfile' || matrix.service == 'makrx-events-backend' && 'backends/makrx-events/Dockerfile' || matrix.service == 'makrx-store-backend' && 'backends/makrx-store/Dockerfile' || format('apps/{0}/Dockerfile', matrix.service) }}

  alembic-drift-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backends/makrcave/requirements.txt
      - name: Prepare SQLite DB URL
        run: echo "DATABASE_URL=sqlite:///$(pwd)/ci_alembic.db" >> $GITHUB_ENV
      - name: Autogenerate revision (drift detection)
        run: |
          alembic -c backends/makrcave/alembic.ini revision --autogenerate -m "ci-drift-check" || true
          if git ls-files --others --exclude-standard -- backends/makrcave/migrations/versions | grep -q .; then
            echo "Schema drift detected by Alembic autogenerate." >&2
            git diff -- backends/makrcave/migrations/versions | cat
            exit 1
          else
            echo "No schema drift detected."
          fi

  makrcave-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_dev_password
          POSTGRES_DB: makrx_ecosystem
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U makrx" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install fastapi==0.110.0 starlette==0.36.3 uvicorn==0.24.0 pytest==8.2.1 \
            sqlalchemy==2.0.32 pydantic==2.7.4 pydantic-settings==2.2.1 httpx==0.27.0 \
            python-jose==3.3.0 python-dotenv==1.0.1 structlog==24.1.0
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/makrx-ecosystem-unified
          DATABASE_URL: postgresql://makrx:makrx_dev_password@localhost:5432/makrx_ecosystem
        run: |
          pytest -q makrx-ecosystem-unified/backends/makrcave/tests

  alembic-postgres-diff:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_dev_password
          POSTGRES_DB: makrx_ecosystem
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U makrx" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install alembic deps
        run: |
          python -m pip install --upgrade pip
          pip install alembic==1.13.2 SQLAlchemy==2.0.32 python-dotenv==1.0.1 psycopg2-binary==2.9.9
      - name: Run Alembic autogenerate against Postgres
        env:
          PYTHONPATH: ${{ github.workspace }}/makrx-ecosystem-unified
          DATABASE_URL: postgresql://makrx:makrx_dev_password@localhost:5432/makrx_ecosystem
        run: |
          alembic -c makrx-ecosystem-unified/backends/makrcave/alembic.ini revision --autogenerate -m "ci-pg-drift-check" || true
          if git ls-files --others --exclude-standard -- makrx-ecosystem-unified/backends/makrcave/migrations/versions | grep -q .; then
            echo "Postgres schema drift detected by Alembic autogenerate." >&2
            git diff -- makrx-ecosystem-unified/backends/makrcave/migrations/versions | cat
            exit 1
          else
            echo "No Postgres schema drift detected."
          fi
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Comprehensive integration testing
  integration-test:
    runs-on: ubuntu-latest
    name: 'Integration Testing'
    needs: [build-frontends, test-backends]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makrx_integration
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_integration_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      keycloak:
        image: quay.io/keycloak/keycloak:25.0
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin123
          KC_HOSTNAME_STRICT: 'false'
          KC_HTTP_ENABLED: 'true'
          KC_HOSTNAME_STRICT_HTTPS: 'false'
        ports:
          - 8081:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/health/ready || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        pip install requests psycopg2-binary redis pytest pytest-asyncio playwright
    
    - name: Install Playwright browsers
      run: playwright install --with-deps
    
    - name: Wait for services
      run: |
        echo "Waiting for services to be ready..."
        timeout 180 bash -c 'until pg_isready -h localhost -p 5433 -U makrx; do sleep 5; done'
        timeout 60 bash -c 'until redis-cli -h localhost -p 6380 ping; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8081/health/ready; do sleep 10; done'
    
    - name: Run integration tests
      run: |
        # Create integration test environment
        cat > .env.integration << EOF
        NODE_ENV=test
        DATABASE_URL=postgresql://makrx:makrx_integration_password@localhost:5433/makrx_integration
        REDIS_URL=redis://localhost:6380
        KEYCLOAK_URL=http://localhost:8081
        KEYCLOAK_REALM=makrx
        KEYCLOAK_ADMIN=admin
        KEYCLOAK_ADMIN_PASSWORD=admin123
        EOF
        
        # Run the existing integration test
        python3 final_integration_test.py
        
        # Run additional E2E tests if they exist
        if [ -d "tests/e2e" ]; then
          pytest tests/e2e/ -v --tb=short
        fi
    
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          logs/
          test-results/
          screenshots/
        retention-days: 30

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    name: 'Performance Testing'
    needs: integration-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Create performance test suite
      run: |
        cat > performance-tests.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        import { Counter, Rate, Trend } from 'k6/metrics';
        
        const errorRate = new Rate('errors');
        const responseTime = new Trend('response_time');
        const throughput = new Counter('throughput');
        
        export const options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 20 },
            { duration: '2m', target: 50 },
            { duration: '5m', target: 50 },
            { duration: '2m', target: 0 },
          ],
          thresholds: {
            errors: ['rate<0.1'],
            http_req_duration: ['p(95)<2000'],
            http_req_failed: ['rate<0.1'],
          },
        };
        
        const BASE_URL = __ENV.BASE_URL || 'http://localhost:3000';
        
        export default function () {
          // Test main gateway
          let res = http.get(`${BASE_URL}/`);
          check(res, {
            'homepage loads': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
          
          errorRate.add(res.status !== 200);
          responseTime.add(res.timings.duration);
          throughput.add(1);
          
          // Test API endpoints
          res = http.get(`${BASE_URL}/api/health`);
          check(res, {
            'health check passes': (r) => r.status === 200,
            'health response time < 500ms': (r) => r.timings.duration < 500,
          });
          
          sleep(1);
        }
        EOF
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        k6 run --out json=performance-results.json performance-tests.js || echo "Performance tests completed with warnings"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: performance-results.json
        retention-days: 30

  # Deployment to staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: 'Deploy to Staging'
    needs: [integration-test, security, build-docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Using Docker images from: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        # Add actual deployment commands here
        # kubectl apply -f k8s/staging/
        # or docker-compose -f docker-compose.staging.yml up -d
    
    - name: Health check staging
      run: |
        echo "Running staging health checks..."
        # Add staging health check commands
        # curl -f https://staging.makrx.com/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deployment to production
  deploy-production:
    runs-on: ubuntu-latest
    name: 'Deploy to Production'
    needs: [performance-test, security, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Using Docker images from: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        # Add actual deployment commands here
    
    - name: Production health check
      run: |
        echo "Running production health checks..."
        # Add production health check commands
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
