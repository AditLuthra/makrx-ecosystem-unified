name: MakrX Ecosystem CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20.x"
  PYTHON_VERSION: "3.11"

jobs:
  # Validation and linting
  validate:
    runs-on: ubuntu-latest
    name: "Validate Ecosystem Structure"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          pip install requests psycopg2-binary redis

      - name: Check project structure
        run: |
          echo "Validating MakrX ecosystem structure..."
          python3 validate_ecosystem.py || true

      - name: Validate package.json configurations
        run: |
          # Check main package.json
          node -e "
            const pkg = require('./package.json');
            if (!pkg.workspaces || !pkg.workspaces.includes('apps/*') || !pkg.workspaces.includes('packages/*')) {
              throw new Error('Workspaces not configured correctly');
            }
            if (!pkg.overrides?.react?.startsWith('18.3.1')) {
              throw new Error('React version not locked to 18.3.1');
            }
            console.log('✅ Main package.json valid');
          "

          # Check Next.js versions in apps
          for app in apps/*/package.json; do
            if [ -f "$app" ]; then
              node -e "
                const pkg = require('./$app');
                const nextVersion = pkg.dependencies?.next || '';
                if (!nextVersion.includes('14.2.32')) {
                  console.warn('⚠️  Next.js version incorrect in $app');
                } else {
                  console.log('✅ Next.js version correct in $app');
                }
              " 
            fi
          done

  # Build shared packages
  build-packages:
    runs-on: ubuntu-latest
    name: "Build Shared Packages"
    needs: validate

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps

      - name: Build shared packages
        run: |
          # Build auth package
          cd packages/auth
          if [ -f "package.json" ]; then
            npm run build || echo "⚠️ No build script for auth package"
          fi
          cd ../..

          # Build shared-ui package  
          cd packages/shared-ui
          if [ -f "package.json" ]; then
            npm run build || echo "⚠️ No build script for shared-ui package"
          fi
          cd ../..

          # Build types package
          cd packages/types  
          if [ -f "package.json" ]; then
            npm run build || echo "⚠️ No build script for types package"
          fi

      - name: Cache built packages
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/lib
            packages/*/.next
          key: packages-build-${{ github.sha }}

  # Build frontend applications
  build-frontends:
    runs-on: ubuntu-latest
    name: "Build Frontend Apps"
    needs: build-packages
    strategy:
      matrix:
        app:
          [
            gateway-frontend,
            gateway-frontend-hacker,
            makrcave,
            makrx-store,
            makrx-events,
          ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Restore packages cache
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/lib
            packages/*/.next
          key: packages-build-${{ github.sha }}

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps

      - name: Create environment file for ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          cat > .env.local << EOF
          NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8081
          NEXT_PUBLIC_KEYCLOAK_REALM=makrx
          NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=${{ matrix.app }}
          EOF

      - name: Build ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          npm run build

      - name: Export static build (if possible)
        run: |
          cd apps/${{ matrix.app }}
          if grep -q '"export"' package.json; then
            npm run export || echo "Static export not available for ${{ matrix.app }}"
          fi

      - name: Cache frontend build
        uses: actions/cache@v3
        with:
          path: |
            apps/${{ matrix.app }}/.next
            apps/${{ matrix.app }}/out
          key: frontend-${{ matrix.app }}-${{ github.sha }}

  # Test backend APIs
  test-backends:
    runs-on: ubuntu-latest
    name: "Test Backend APIs"
    needs: validate

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makrx_ecosystem
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_dev_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        backend: [makrcave, makrx-events, makrx-store]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python (for FastAPI backends)
        if: matrix.backend != 'makrx-events'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js (for Express backend)
        if: matrix.backend == 'makrx-events'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies (${{ matrix.backend }})
        run: |
          cd backends/${{ matrix.backend }}
          if [ -f "requirements.txt" ]; then
            # FastAPI backend
            pip install -r requirements.txt
          elif [ -f "package.json" ]; then
            # Express backend
            npm ci
          fi

      - name: Create backend environment file
        run: |
          cd backends/${{ matrix.backend }}
          cat > .env << EOF
          DATABASE_URL=postgresql://makrx:makrx_dev_password@localhost:5433/makrx_ecosystem
          REDIS_URL=redis://localhost:6380
          KEYCLOAK_URL=http://localhost:8081
          KEYCLOAK_REALM=makrx
          KEYCLOAK_CLIENT_ID=${{ matrix.backend }}
          PORT=$(if [ "${{ matrix.backend }}" = "makrcave" ]; then echo "8001"; elif [ "${{ matrix.backend }}" = "makrx-events" ]; then echo "8002"; else echo "8003"; fi)
          EOF

      - name: Run backend tests (${{ matrix.backend }})
        run: |
          cd backends/${{ matrix.backend }}
          if [ -f "test_main.py" ] || [ -f "tests/" ]; then
            python -m pytest tests/ || echo "⚠️ No tests found for ${{ matrix.backend }}"
          elif [ -f "package.json" ] && grep -q test package.json; then
            npm test || echo "⚠️ No tests found for ${{ matrix.backend }}"
          else
            echo "⚠️ No test configuration found for ${{ matrix.backend }}"
          fi

      - name: Lint backend code
        run: |
          cd backends/${{ matrix.backend }}
          if [ -f "requirements.txt" ]; then
            # Python linting
            pip install flake8 black || true
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Linting issues found"
          elif [ -f "package.json" ]; then
            # Node.js linting
            if grep -q eslint package.json; then
              npx eslint . || echo "⚠️ Linting issues found"
            fi
          fi

  # Integration testing
  integration-test:
    runs-on: ubuntu-latest
    name: "Integration Tests"
    needs: [build-packages, build-frontends, test-backends]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makrx_ecosystem
          POSTGRES_USER: makrx
          POSTGRES_PASSWORD: makrx_dev_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      keycloak:
        image: quay.io/keycloak/keycloak:23.0
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          KC_HOSTNAME_STRICT: "false"
          KC_HTTP_ENABLED: "true"
        ports:
          - 8081:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/health/ready || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          pip install requests psycopg2-binary redis

      - name: Restore all caches
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/lib
            apps/*/.next
          key: all-builds-${{ github.sha }}

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

          # Check PostgreSQL
          pg_isready -h localhost -p 5433 -U makrx

          # Check Redis
          redis-cli -h localhost -p 6380 ping

          # Check Keycloak
          timeout 120 bash -c 'until curl -f http://localhost:8081/health/ready; do sleep 5; done'

      - name: Run integration tests
        run: |
          echo "Running ecosystem integration tests..."
          python3 final_integration_test.py || true

      - name: Generate test report
        if: always()
        run: |
          echo "# Integration Test Results" > test-report.md
          echo "" >> test-report.md
          echo "## Services Status" >> test-report.md

          # Check service connectivity
          services=("postgres:5433" "redis:6380" "keycloak:8081")
          for service in "${services[@]}"; do
            IFS=':' read -r name port <<< "$service"
            if timeout 5 bash -c "</dev/tcp/localhost/$port"; then
              echo "- ✅ $name (port $port): Connected" >> test-report.md
            else
              echo "- ❌ $name (port $port): Failed to connect" >> test-report.md
            fi
          done

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-report.md
            logs/
          retention-days: 30

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    name: "Security Scan"
    needs: validate

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: NPM security audit
        run: |
          npm audit --audit-level=high || echo "⚠️ Security vulnerabilities found"

      - name: Check for secrets
        run: |
          # Basic secret scanning
          if grep -r -i "password\|secret\|token\|key" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" --exclude="*.yml"; then
            echo "⚠️ Potential secrets found in codebase"
          else
            echo "✅ No obvious secrets detected"
          fi

  # Performance and load testing
  performance-test:
    runs-on: ubuntu-latest
    name: "Performance Tests"
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6 for load testing
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create load test script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';

          export const options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 20 },
              { duration: '30s', target: 0 },
            ],
          };

          export default function () {
            // Test frontend endpoints
            const frontends = [3000, 3001, 3002, 3003, 3004];
            
            frontends.forEach(port => {
              const response = http.get(`http://localhost:${port}`);
              check(response, {
                [`Frontend ${port} status is 200`]: (r) => r.status === 200,
                [`Frontend ${port} response time < 2s`]: (r) => r.timings.duration < 2000,
              });
            });
            
            // Test backend APIs
            const backends = [8001, 8002, 8003];
            
            backends.forEach(port => {
              const response = http.get(`http://localhost:${port}/health`);
              check(response, {
                [`Backend ${port} status is 200`]: (r) => r.status === 200,
                [`Backend ${port} response time < 500ms`]: (r) => r.timings.duration < 500,
              });
            });
          }
          EOF

      - name: Run performance tests
        run: |
          echo "Performance tests would run here with full ecosystem"
          echo "Skipping actual k6 run in CI environment"
          # k6 run load-test.js

  # Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    name: "Deploy to Staging"
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would deploy to staging servers"
          # Add actual deployment commands here

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          # Add smoke tests for staging environment

  deploy-production:
    runs-on: ubuntu-latest
    name: "Deploy to Production"
    needs: [integration-test, security-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "This would deploy to production servers"
          # Add actual deployment commands here

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke tests for production environment
