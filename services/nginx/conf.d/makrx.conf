# Upstream definitions
upstream gateway_frontend {
    server gateway-frontend:3000;
}

upstream gateway_frontend_hacker {
    server gateway-frontend-hacker:3001;
}

upstream makrcave {
    server makrcave:3002;
}

upstream makrx_store {
    server makrx-store:3003;
}

upstream makrx_events {
    server makrx-events:3004;
}

upstream makrx_events_api {
    server makrx-events-backend:5000;
}

upstream makrcave_api {
    # FastAPI MakrCave backend (dev compose service name)
    server makrcave-backend:8000;
}

upstream makrx_store_api {
    # FastAPI MakrX Store backend
    server makrx-store-backend:8000;
}

upstream keycloak {
    server keycloak:8080;
}

# Health check endpoint
server {
    listen 80;
    server_name _;
    
    location /health {
        return 200 "OK";
        add_header Content-Type text/plain;
    }
    
    location = /health.html {
        root /usr/share/nginx/html;
    }
}

# Development configuration (localhost)
server {
    listen 80;
    server_name localhost;
    
    # Gateway Frontend (default)
    location / {
        proxy_pass http://gateway_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Route API paths to MakrCave backend when developing locally
    location ~* ^/(api|api/v1)(/|$) {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://makrcave_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

# Production configurations

# makrx.org - Gateway Frontend
server {
    listen 80;
    server_name makrx.org www.makrx.org;
    
    # Redirect to HTTPS in production
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name makrx.org www.makrx.org;

    include /etc/nginx/conf.d/security.conf;
    
    ssl_certificate /etc/nginx/ssl/makrx.org.crt;
    ssl_certificate_key /etc/nginx/ssl/makrx.org.key;
    
    location / {
        proxy_pass http://gateway_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location /auth/ {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://keycloak;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://gateway_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# hacker.makrx.org - Gateway Frontend Hacker
server {
    listen 80;
    server_name hacker.makrx.org;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name hacker.makrx.org;

    include /etc/nginx/conf.d/security.conf;
    
    ssl_certificate /etc/nginx/ssl/hacker.makrx.org.crt;
    ssl_certificate_key /etc/nginx/ssl/hacker.makrx.org.key;
    
    location / {
        proxy_pass http://gateway_frontend_hacker;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# makrcave.com - MakrCave
server {
    listen 80;
    server_name makrcave.com www.makrcave.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name makrcave.com www.makrcave.com;

    include /etc/nginx/conf.d/security.conf;
    
    ssl_certificate /etc/nginx/ssl/makrcave.com.crt;
    ssl_certificate_key /etc/nginx/ssl/makrcave.com.key;
    
    location / {
        proxy_pass http://makrcave;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Route API paths to MakrCave backend service
    location ~* ^/(api|api/v1)(/|$) {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://makrcave_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

# makrx.store - MakrX Store
server {
    listen 80;
    server_name makrx.store www.makrx.store;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name makrx.store www.makrx.store;

    include /etc/nginx/conf.d/security.conf;
    
    ssl_certificate /etc/nginx/ssl/makrx.store.crt;
    ssl_certificate_key /etc/nginx/ssl/makrx.store.key;
    
    location / {
        proxy_pass http://makrx_store;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Route API paths to Store backend service
    location ~* ^/(api|api/v1)(/|$) {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://makrx_store_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

# makrx.events - MakrX Events
server {
    listen 80;
    server_name makrx.events www.makrx.events;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name makrx.events www.makrx.events;

    include /etc/nginx/conf.d/security.conf;
    
    ssl_certificate /etc/nginx/ssl/makrx.events.crt;
    ssl_certificate_key /etc/nginx/ssl/makrx.events.key;
    
    # Route application frontend
    location / {
        proxy_pass http://makrx_events;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Route API paths to backend service
    location ~* ^/(api|api/v1)(/|$) {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://makrx_events_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

# auth.makrx.org - Keycloak
server {
    listen 80;
    server_name auth.makrx.org;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name auth.makrx.org;

    include /etc/nginx/conf.d/security.conf;
    
    ssl_certificate /etc/nginx/ssl/auth.makrx.org.crt;
    ssl_certificate_key /etc/nginx/ssl/auth.makrx.org.key;
    
    location / {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://keycloak;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Keycloak specific headers
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Server $host;
    }
}